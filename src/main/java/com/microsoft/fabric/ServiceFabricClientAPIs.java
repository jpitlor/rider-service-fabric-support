package com.microsoft.fabric;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.microsoft.fabric.models.AadMetadataObject;
import com.microsoft.fabric.models.ApplicationDescription;
import com.microsoft.fabric.models.ApplicationEvent;
import com.microsoft.fabric.models.ApplicationHealth;
import com.microsoft.fabric.models.ApplicationHealthPolicy;
import com.microsoft.fabric.models.ApplicationInfo;
import com.microsoft.fabric.models.ApplicationLoadInfo;
import com.microsoft.fabric.models.ApplicationNameInfo;
import com.microsoft.fabric.models.ApplicationTypeManifest;
import com.microsoft.fabric.models.ApplicationUpdateDescription;
import com.microsoft.fabric.models.ApplicationUpgradeDescription;
import com.microsoft.fabric.models.ApplicationUpgradeProgressInfo;
import com.microsoft.fabric.models.ApplicationUpgradeUpdateDescription;
import com.microsoft.fabric.models.BackupPartitionDescription;
import com.microsoft.fabric.models.BackupPolicyDescription;
import com.microsoft.fabric.models.BackupProgressInfo;
import com.microsoft.fabric.models.Chaos;
import com.microsoft.fabric.models.ChaosEventsSegment;
import com.microsoft.fabric.models.ChaosParameters;
import com.microsoft.fabric.models.ChaosScheduleDescription;
import com.microsoft.fabric.models.ClusterConfiguration;
import com.microsoft.fabric.models.ClusterConfigurationUpgradeDescription;
import com.microsoft.fabric.models.ClusterConfigurationUpgradeStatusInfo;
import com.microsoft.fabric.models.ClusterEvent;
import com.microsoft.fabric.models.ClusterHealth;
import com.microsoft.fabric.models.ClusterHealthChunk;
import com.microsoft.fabric.models.ClusterHealthChunkQueryDescription;
import com.microsoft.fabric.models.ClusterHealthPolicies;
import com.microsoft.fabric.models.ClusterHealthPolicy;
import com.microsoft.fabric.models.ClusterLoadInfo;
import com.microsoft.fabric.models.ClusterManifest;
import com.microsoft.fabric.models.ClusterUpgradeProgressObject;
import com.microsoft.fabric.models.ClusterVersion;
import com.microsoft.fabric.models.ComposeDeploymentStatusInfo;
import com.microsoft.fabric.models.ComposeDeploymentUpgradeDescription;
import com.microsoft.fabric.models.ComposeDeploymentUpgradeProgressInfo;
import com.microsoft.fabric.models.ConfigParameterOverride;
import com.microsoft.fabric.models.ContainerApiRequestBody;
import com.microsoft.fabric.models.ContainerApiResponse;
import com.microsoft.fabric.models.ContainerInstanceEvent;
import com.microsoft.fabric.models.ContainerLogs;
import com.microsoft.fabric.models.CreateComposeDeploymentDescription;
import com.microsoft.fabric.models.DataLossMode;
import com.microsoft.fabric.models.DeactivationIntentDescription;
import com.microsoft.fabric.models.DeployServicePackageToNodeDescription;
import com.microsoft.fabric.models.DeployedApplicationHealth;
import com.microsoft.fabric.models.DeployedApplicationInfo;
import com.microsoft.fabric.models.DeployedCodePackageInfo;
import com.microsoft.fabric.models.DeployedServicePackageHealth;
import com.microsoft.fabric.models.DeployedServicePackageInfo;
import com.microsoft.fabric.models.DeployedServiceReplicaDetailInfo;
import com.microsoft.fabric.models.DeployedServiceReplicaInfo;
import com.microsoft.fabric.models.DeployedServiceTypeInfo;
import com.microsoft.fabric.models.DisableBackupDescription;
import com.microsoft.fabric.models.EnableBackupDescription;
import com.microsoft.fabric.models.FabricCodeVersionInfo;
import com.microsoft.fabric.models.FabricConfigVersionInfo;
import com.microsoft.fabric.models.FabricErrorException;
import com.microsoft.fabric.models.FabricEvent;
import com.microsoft.fabric.models.FolderSizeInfo;
import com.microsoft.fabric.models.GetBackupByStorageQueryDescription;
import com.microsoft.fabric.models.HealthInformation;
import com.microsoft.fabric.models.HostOptions;
import com.microsoft.fabric.models.ImageStoreContent;
import com.microsoft.fabric.models.ImageStoreCopyDescription;
import com.microsoft.fabric.models.ImageStoreInfo;
import com.microsoft.fabric.models.LoadedPartitionInformationResultList;
import com.microsoft.fabric.models.NameDescription;
import com.microsoft.fabric.models.NodeEvent;
import com.microsoft.fabric.models.NodeHealth;
import com.microsoft.fabric.models.NodeInfo;
import com.microsoft.fabric.models.NodeLoadInfo;
import com.microsoft.fabric.models.NodeStatusFilter;
import com.microsoft.fabric.models.NodeTransitionProgress;
import com.microsoft.fabric.models.NodeTransitionType;
import com.microsoft.fabric.models.OperationStatus;
import com.microsoft.fabric.models.Ordering;
import com.microsoft.fabric.models.PagedApplicationInfoList;
import com.microsoft.fabric.models.PagedApplicationTypeInfoList;
import com.microsoft.fabric.models.PagedBackupConfigurationInfoList;
import com.microsoft.fabric.models.PagedBackupEntityList;
import com.microsoft.fabric.models.PagedBackupInfoList;
import com.microsoft.fabric.models.PagedBackupPolicyDescriptionList;
import com.microsoft.fabric.models.PagedComposeDeploymentStatusInfoList;
import com.microsoft.fabric.models.PagedDeployedApplicationInfoList;
import com.microsoft.fabric.models.PagedNodeInfoList;
import com.microsoft.fabric.models.PagedPropertyInfoList;
import com.microsoft.fabric.models.PagedReplicaInfoList;
import com.microsoft.fabric.models.PagedServiceInfoList;
import com.microsoft.fabric.models.PagedServicePartitionInfoList;
import com.microsoft.fabric.models.PagedSubNameInfoList;
import com.microsoft.fabric.models.PagedUpdatePartitionLoadResultList;
import com.microsoft.fabric.models.PartitionBackupConfigurationInfo;
import com.microsoft.fabric.models.PartitionDataLossProgress;
import com.microsoft.fabric.models.PartitionEvent;
import com.microsoft.fabric.models.PartitionHealth;
import com.microsoft.fabric.models.PartitionLoadInformation;
import com.microsoft.fabric.models.PartitionMetricLoadDescription;
import com.microsoft.fabric.models.PartitionQuorumLossProgress;
import com.microsoft.fabric.models.PartitionRestartProgress;
import com.microsoft.fabric.models.PropertyBatchDescriptionList;
import com.microsoft.fabric.models.PropertyBatchInfo;
import com.microsoft.fabric.models.PropertyDescription;
import com.microsoft.fabric.models.PropertyInfo;
import com.microsoft.fabric.models.ProvisionApplicationTypeDescriptionBase;
import com.microsoft.fabric.models.ProvisionFabricDescription;
import com.microsoft.fabric.models.QuorumLossMode;
import com.microsoft.fabric.models.RepairTask;
import com.microsoft.fabric.models.RepairTaskApproveDescription;
import com.microsoft.fabric.models.RepairTaskCancelDescription;
import com.microsoft.fabric.models.RepairTaskDeleteDescription;
import com.microsoft.fabric.models.RepairTaskUpdateHealthPolicyDescription;
import com.microsoft.fabric.models.RepairTaskUpdateInfo;
import com.microsoft.fabric.models.ReplicaEvent;
import com.microsoft.fabric.models.ReplicaHealth;
import com.microsoft.fabric.models.ReplicaHealthReportServiceKind;
import com.microsoft.fabric.models.ReplicaInfo;
import com.microsoft.fabric.models.ResolvedServicePartition;
import com.microsoft.fabric.models.RestartDeployedCodePackageDescription;
import com.microsoft.fabric.models.RestartNodeDescription;
import com.microsoft.fabric.models.RestartPartitionMode;
import com.microsoft.fabric.models.RestorePartitionDescription;
import com.microsoft.fabric.models.RestoreProgressInfo;
import com.microsoft.fabric.models.ResumeApplicationUpgradeDescription;
import com.microsoft.fabric.models.ResumeClusterUpgradeDescription;
import com.microsoft.fabric.models.ServiceDescription;
import com.microsoft.fabric.models.ServiceEvent;
import com.microsoft.fabric.models.ServiceFromTemplateDescription;
import com.microsoft.fabric.models.ServiceHealth;
import com.microsoft.fabric.models.ServiceInfo;
import com.microsoft.fabric.models.ServiceNameInfo;
import com.microsoft.fabric.models.ServicePartitionInfo;
import com.microsoft.fabric.models.ServiceTypeInfo;
import com.microsoft.fabric.models.ServiceTypeManifest;
import com.microsoft.fabric.models.ServiceUpdateDescription;
import com.microsoft.fabric.models.StartClusterUpgradeDescription;
import com.microsoft.fabric.models.UnplacedReplicaInformation;
import com.microsoft.fabric.models.UnprovisionApplicationTypeDescriptionInfo;
import com.microsoft.fabric.models.UnprovisionFabricDescription;
import com.microsoft.fabric.models.UpdateClusterUpgradeDescription;
import com.microsoft.fabric.models.UpgradeOrchestrationServiceState;
import com.microsoft.fabric.models.UpgradeOrchestrationServiceStateSummary;
import com.microsoft.fabric.models.UploadSession;
import com.microsoft.fabric.models.ValidateClusterUpgradeResult;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the ServiceFabricClientAPIs type. */
public final class ServiceFabricClientAPIs {
    /** The proxy service used to perform REST calls. */
    private final ServiceFabricClientAPIsService service;

    /** server parameter. */
    private final HostOptions host;

    /**
     * Gets server parameter.
     *
     * @return the host value.
     */
    public HostOptions getHost() {
        return this.host;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The MeshSecrets object to access its operations. */
    private final MeshSecrets meshSecrets;

    /**
     * Gets the MeshSecrets object to access its operations.
     *
     * @return the MeshSecrets object.
     */
    public MeshSecrets getMeshSecrets() {
        return this.meshSecrets;
    }

    /** The MeshSecretValues object to access its operations. */
    private final MeshSecretValues meshSecretValues;

    /**
     * Gets the MeshSecretValues object to access its operations.
     *
     * @return the MeshSecretValues object.
     */
    public MeshSecretValues getMeshSecretValues() {
        return this.meshSecretValues;
    }

    /** The MeshVolumes object to access its operations. */
    private final MeshVolumes meshVolumes;

    /**
     * Gets the MeshVolumes object to access its operations.
     *
     * @return the MeshVolumes object.
     */
    public MeshVolumes getMeshVolumes() {
        return this.meshVolumes;
    }

    /** The MeshNetworks object to access its operations. */
    private final MeshNetworks meshNetworks;

    /**
     * Gets the MeshNetworks object to access its operations.
     *
     * @return the MeshNetworks object.
     */
    public MeshNetworks getMeshNetworks() {
        return this.meshNetworks;
    }

    /** The MeshApplications object to access its operations. */
    private final MeshApplications meshApplications;

    /**
     * Gets the MeshApplications object to access its operations.
     *
     * @return the MeshApplications object.
     */
    public MeshApplications getMeshApplications() {
        return this.meshApplications;
    }

    /** The MeshServices object to access its operations. */
    private final MeshServices meshServices;

    /**
     * Gets the MeshServices object to access its operations.
     *
     * @return the MeshServices object.
     */
    public MeshServices getMeshServices() {
        return this.meshServices;
    }

    /** The MeshCodePackages object to access its operations. */
    private final MeshCodePackages meshCodePackages;

    /**
     * Gets the MeshCodePackages object to access its operations.
     *
     * @return the MeshCodePackages object.
     */
    public MeshCodePackages getMeshCodePackages() {
        return this.meshCodePackages;
    }

    /** The MeshServiceReplicas object to access its operations. */
    private final MeshServiceReplicas meshServiceReplicas;

    /**
     * Gets the MeshServiceReplicas object to access its operations.
     *
     * @return the MeshServiceReplicas object.
     */
    public MeshServiceReplicas getMeshServiceReplicas() {
        return this.meshServiceReplicas;
    }

    /** The MeshGateways object to access its operations. */
    private final MeshGateways meshGateways;

    /**
     * Gets the MeshGateways object to access its operations.
     *
     * @return the MeshGateways object.
     */
    public MeshGateways getMeshGateways() {
        return this.meshGateways;
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIs client.
     *
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ServiceFabricClientAPIs(HostOptions host, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                host,
                apiVersion);
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIs client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ServiceFabricClientAPIs(HttpPipeline httpPipeline, HostOptions host, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), host, apiVersion);
    }

    /**
     * Initializes an instance of ServiceFabricClientAPIs client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param host server parameter.
     * @param apiVersion Api Version.
     */
    ServiceFabricClientAPIs(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, HostOptions host, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.host = host;
        this.apiVersion = apiVersion;
        this.meshSecrets = new MeshSecrets(this);
        this.meshSecretValues = new MeshSecretValues(this);
        this.meshVolumes = new MeshVolumes(this);
        this.meshNetworks = new MeshNetworks(this);
        this.meshApplications = new MeshApplications(this);
        this.meshServices = new MeshServices(this);
        this.meshCodePackages = new MeshCodePackages(this);
        this.meshServiceReplicas = new MeshServiceReplicas(this);
        this.meshGateways = new MeshGateways(this);
        this.service =
                RestProxy.create(ServiceFabricClientAPIsService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for ServiceFabricClientAPIs to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricClientA")
    private interface ServiceFabricClientAPIsService {
        @Get("/$/GetClusterManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterManifest>> getClusterManifest(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterHealth>> getClusterHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("NodesHealthStateFilter") Integer nodesHealthStateFilter,
                @QueryParam("ApplicationsHealthStateFilter") Integer applicationsHealthStateFilter,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("IncludeSystemApplicationHealthStatistics")
                        Boolean includeSystemApplicationHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/GetClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterHealth>> getClusterHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("NodesHealthStateFilter") Integer nodesHealthStateFilter,
                @QueryParam("ApplicationsHealthStateFilter") Integer applicationsHealthStateFilter,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("IncludeSystemApplicationHealthStatistics")
                        Boolean includeSystemApplicationHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ClusterHealthPolicies clusterHealthPolicies,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetClusterHealthChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterHealthChunk>> getClusterHealthChunk(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/GetClusterHealthChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterHealthChunk>> getClusterHealthChunkUsingPolicyAndAdvancedFilters(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ClusterHealthChunkQueryDescription clusterHealthChunkQueryDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/ReportClusterHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportClusterHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetProvisionedCodeVersions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<FabricCodeVersionInfo>>> getProvisionedFabricCodeVersionInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("CodeVersion") String codeVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetProvisionedConfigVersions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<FabricConfigVersionInfo>>> getProvisionedFabricConfigVersionInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("ConfigVersion") String configVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterUpgradeProgressObject>> getClusterUpgradeProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetClusterConfiguration")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterConfiguration>> getClusterConfiguration(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("ConfigurationApiVersion") String configurationApiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetClusterConfigurationUpgradeStatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterConfigurationUpgradeStatusInfo>> getClusterConfigurationUpgradeStatus(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetUpgradeOrchestrationServiceState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<UpgradeOrchestrationServiceState>> getUpgradeOrchestrationServiceState(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/SetUpgradeOrchestrationServiceState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<UpgradeOrchestrationServiceStateSummary>> setUpgradeOrchestrationServiceState(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") UpgradeOrchestrationServiceState upgradeOrchestrationServiceState,
                @HeaderParam("Accept") String accept);

        @Post("/$/Provision")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> provisionCluster(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ProvisionFabricDescription provisionFabricDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/Unprovision")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> unprovisionCluster(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") UnprovisionFabricDescription unprovisionFabricDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/RollbackUpgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> rollbackClusterUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/MoveToNextUpgradeDomain")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resumeClusterUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ResumeClusterUpgradeDescription resumeClusterUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/Upgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startClusterUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") StartClusterUpgradeDescription startClusterUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/StartClusterConfigurationUpgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startClusterConfigurationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json")
                        ClusterConfigurationUpgradeDescription clusterConfigurationUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/UpdateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> updateClusterUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") UpdateClusterUpgradeDescription updateClusterUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetAadMetadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<AadMetadataObject>> getAadMetadata(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetClusterVersion")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterVersion>> getClusterVersion(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ClusterLoadInfo>> getClusterLoad(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/ToggleVerboseServicePlacementHealthReporting")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> toggleVerboseServicePlacementHealthReporting(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("Enabled") boolean enabled,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/ValidateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ValidateClusterUpgradeResult>> validateClusterUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") StartClusterUpgradeDescription startClusterUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedNodeInfoList>> getNodeInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("NodeStatusFilter") NodeStatusFilter nodeStatusFilter,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<NodeInfo>> getNodeInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<NodeHealth>> getNodeHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<NodeHealth>> getNodeHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ClusterHealthPolicy clusterHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportNodeHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<NodeLoadInfo>> getNodeLoadInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/Deactivate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> disableNode(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") DeactivationIntentDescription deactivationIntentDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/Activate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> enableNode(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/RemoveNodeState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> removeNodeState(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> restartNode(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") RestartNodeDescription restartNodeDescription,
                @HeaderParam("Accept") String accept);

        @Delete("/Nodes/{nodeName}/$/RemoveConfigurationOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> removeConfigurationOverrides(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetConfigurationOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ConfigParameterOverride>>> getConfigurationOverrides(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/AddConfigurationParameterOverrides")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> addConfigurationParameterOverrides(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("Force") Boolean force,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") List<ConfigParameterOverride> configParameterOverrideList,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/RemoveNodeTags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> removeNodeTags(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") List<String> nodeTags,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/AddNodeTags")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> addNodeTags(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @BodyParam("application/json") List<String> nodeTags,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedApplicationTypeInfoList>> getApplicationTypeInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("ApplicationTypeDefinitionKindFilter") Integer applicationTypeDefinitionKindFilter,
                @QueryParam("ExcludeApplicationParameters") Boolean excludeApplicationParameters,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes/{applicationTypeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedApplicationTypeInfoList>> getApplicationTypeInfoListByName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("ApplicationTypeVersion") String applicationTypeVersion,
                @QueryParam("ExcludeApplicationParameters") Boolean excludeApplicationParameters,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/ApplicationTypes/$/Provision")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> provisionApplicationType(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json")
                        ProvisionApplicationTypeDescriptionBase
                                provisionApplicationTypeDescriptionBaseRequiredBodyParam,
                @HeaderParam("Accept") String accept);

        @Post("/ApplicationTypes/{applicationTypeName}/$/Unprovision")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> unprovisionApplicationType(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json")
                        UnprovisionApplicationTypeDescriptionInfo unprovisionApplicationTypeDescriptionInfo,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ServiceTypeInfo>>> getServiceTypeInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("ApplicationTypeVersion") String applicationTypeVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceTypeInfo>> getServiceTypeInfoByName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("ApplicationTypeVersion") String applicationTypeVersion,
                @PathParam(value = "serviceTypeName", encoded = true) String serviceTypeName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceTypeManifest>> getServiceManifest(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("ApplicationTypeVersion") String applicationTypeVersion,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedServiceTypeInfo>>> getDeployedServiceTypeInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedServiceTypeInfo>>> getDeployedServiceTypeInfoByName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "serviceTypeName", encoded = true) String serviceTypeName,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createApplication(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationDescription applicationDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteApplication(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ForceRemove") Boolean forceRemove,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetLoadInformation")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationLoadInfo>> getApplicationLoadInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedApplicationInfoList>> getApplicationInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("ApplicationDefinitionKindFilter") Integer applicationDefinitionKindFilter,
                @QueryParam("ApplicationTypeName") String applicationTypeName,
                @QueryParam("ExcludeApplicationParameters") Boolean excludeApplicationParameters,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationInfo>> getApplicationInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ExcludeApplicationParameters") Boolean excludeApplicationParameters,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationHealth>> getApplicationHealth(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("DeployedApplicationsHealthStateFilter") Integer deployedApplicationsHealthStateFilter,
                @QueryParam("ServicesHealthStateFilter") Integer servicesHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationHealth>> getApplicationHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("DeployedApplicationsHealthStateFilter") Integer deployedApplicationsHealthStateFilter,
                @QueryParam("ServicesHealthStateFilter") Integer servicesHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportApplicationHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/Upgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startApplicationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationUpgradeDescription applicationUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationUpgradeProgressInfo>> getApplicationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/UpdateUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> updateApplicationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationUpgradeUpdateDescription applicationUpgradeUpdateDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> updateApplication(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationUpdateDescription applicationUpdateDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/MoveToNextUpgradeDomain")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resumeApplicationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ResumeApplicationUpgradeDescription resumeApplicationUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/RollbackUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> rollbackApplicationUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedDeployedApplicationInfoList>> getDeployedApplicationInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @QueryParam("IncludeHealthState") Boolean includeHealthState,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedApplicationInfo>> getDeployedApplicationInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("IncludeHealthState") Boolean includeHealthState,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedApplicationHealth>> getDeployedApplicationHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("DeployedServicePackagesHealthStateFilter")
                        Integer deployedServicePackagesHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedApplicationHealth>> getDeployedApplicationHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("DeployedServicePackagesHealthStateFilter")
                        Integer deployedServicePackagesHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportDeployedApplicationHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationTypeManifest>> getApplicationManifest(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("applicationTypeName") String applicationTypeName,
                @QueryParam("ApplicationTypeVersion") String applicationTypeVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetServices")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedServiceInfoList>> getServiceInfoList(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ServiceTypeName") String serviceTypeName,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetServices/{serviceId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceInfo>> getServiceInfo(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetApplicationName")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ApplicationNameInfo>> getApplicationNameInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/GetServices/$/Create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createService(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ServiceDescription serviceDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/GetServices/$/CreateFromTemplate")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createServiceFromTemplate(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ServiceFromTemplateDescription serviceFromTemplateDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteService(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("ForceRemove") Boolean forceRemove,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> updateService(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ServiceUpdateDescription serviceUpdateDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetDescription")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceDescription>> getServiceDescription(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceHealth>> getServiceHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("PartitionsHealthStateFilter") Integer partitionsHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceHealth>> getServiceHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("PartitionsHealthStateFilter") Integer partitionsHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportServiceHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/ResolvePartition")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ResolvedServicePartition>> resolveService(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("PartitionKeyType") Integer partitionKeyType,
                @QueryParam(value = "PartitionKeyValue", encoded = true) String partitionKeyValue,
                @QueryParam(value = "PreviousRspVersion", encoded = true) String previousRspVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetUnplacedReplicaInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<UnplacedReplicaInformation>> getUnplacedReplicaInformation(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("PartitionId") UUID partitionId,
                @QueryParam("OnlyQueryPrimaries") Boolean onlyQueryPrimaries,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetLoadedPartitionInfoList")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<LoadedPartitionInformationResultList>> getLoadedPartitionInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("MetricName") String metricName,
                @QueryParam("ServiceName") String serviceName,
                @QueryParam("Ordering") Ordering ordering,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedServicePartitionInfoList>> getPartitionInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServicePartitionInfo>> getPartitionInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetServiceName")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ServiceNameInfo>> getServiceNameInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionHealth>> getPartitionHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("ReplicasHealthStateFilter") Integer replicasHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionHealth>> getPartitionHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("ReplicasHealthStateFilter") Integer replicasHealthStateFilter,
                @QueryParam("ExcludeHealthStatistics") Boolean excludeHealthStatistics,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportPartitionHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetLoadInformation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionLoadInformation>> getPartitionLoadInformation(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/ResetLoad")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resetPartitionLoad(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/Recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> recoverPartition(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/$/{serviceId}/$/GetPartitions/$/Recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> recoverServicePartitions(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/RecoverSystemPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> recoverSystemPartitions(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/RecoverAllPartitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> recoverAllPartitions(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/MovePrimaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> movePrimaryReplica(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("NodeName") String nodeName,
                @QueryParam("IgnoreConstraints") Boolean ignoreConstraints,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/MoveSecondaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> moveSecondaryReplica(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("CurrentNodeName") String currentNodeName,
                @QueryParam("NewNodeName") String newNodeName,
                @QueryParam("IgnoreConstraints") Boolean ignoreConstraints,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/UpdatePartitionLoad")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedUpdatePartitionLoadResultList>> updatePartitionLoad(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") List<PartitionMetricLoadDescription> partitionMetricLoadDescriptionList,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/GetPartitions/{partitionId}/$/MoveInstance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> moveInstance(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("CurrentNodeName") String currentNodeName,
                @QueryParam("NewNodeName") String newNodeName,
                @QueryParam("IgnoreConstraints") Boolean ignoreConstraints,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/GetPartitions/{partitionId}/$/MoveAuxiliaryReplica")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> moveAuxiliaryReplica(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("CurrentNodeName") String currentNodeName,
                @QueryParam("NewNodeName") String newNodeName,
                @QueryParam("IgnoreConstraints") Boolean ignoreConstraints,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/CreateRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RepairTaskUpdateInfo>> createRepairTask(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RepairTask repairTask,
                @HeaderParam("Accept") String accept);

        @Post("/$/CancelRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RepairTaskUpdateInfo>> cancelRepairTask(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RepairTaskCancelDescription repairTaskCancelDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/DeleteRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteRepairTask(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RepairTaskDeleteDescription repairTaskDeleteDescription,
                @HeaderParam("Accept") String accept);

        @Get("/$/GetRepairTaskList")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<RepairTask>>> getRepairTaskList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("TaskIdFilter") String taskIdFilter,
                @QueryParam("StateFilter") Integer stateFilter,
                @QueryParam("ExecutorFilter") String executorFilter,
                @HeaderParam("Accept") String accept);

        @Post("/$/ForceApproveRepairTask")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RepairTaskUpdateInfo>> forceApproveRepairTask(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RepairTaskApproveDescription repairTaskApproveDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/UpdateRepairTaskHealthPolicy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RepairTaskUpdateInfo>> updateRepairTaskHealthPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        RepairTaskUpdateHealthPolicyDescription repairTaskUpdateHealthPolicyDescription,
                @HeaderParam("Accept") String accept);

        @Post("/$/UpdateRepairExecutionState")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RepairTaskUpdateInfo>> updateRepairExecutionState(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RepairTask repairTask,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetReplicas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedReplicaInfoList>> getReplicaInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetReplicas/{replicaId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ReplicaInfo>> getReplicaInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ReplicaHealth>> getReplicaHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ReplicaHealth>> getReplicaHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportReplicaHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("ServiceKind") ReplicaHealthReportServiceKind serviceKind,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedServiceReplicaInfo>>> getDeployedServiceReplicaInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("PartitionId") UUID partitionId,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedServiceReplicaDetailInfo>> getDeployedServiceReplicaDetailInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedServiceReplicaDetailInfo>> getDeployedServiceReplicaDetailInfoByPartitionId(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> restartReplica(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> removeReplica(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("ForceRemove") Boolean forceRemove,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedServicePackageInfo>>> getDeployedServicePackageInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedServicePackageInfo>>> getDeployedServicePackageInfoListByName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedServicePackageHealth>> getDeployedServicePackageHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<DeployedServicePackageHealth>> getDeployedServicePackageHealthUsingPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                @QueryParam("EventsHealthStateFilter") Integer eventsHealthStateFilter,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ApplicationHealthPolicy applicationHealthPolicy,
                @HeaderParam("Accept") String accept);

        @Post(
                "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> reportDeployedServicePackageHealth(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @PathParam(value = "servicePackageName", encoded = true) String servicePackageName,
                @QueryParam("Immediate") Boolean immediate,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") HealthInformation healthInformation,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/DeployServicePackage")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deployServicePackageToNode(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json")
                        DeployServicePackageToNodeDescription deployServicePackageToNodeDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<DeployedCodePackageInfo>>> getDeployedCodePackageInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("CodePackageName") String codePackageName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> restartDeployedCodePackage(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json")
                        RestartDeployedCodePackageDescription restartDeployedCodePackageDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ContainerLogs>> getContainerLogsDeployedOnNode(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("CodePackageName") String codePackageName,
                @QueryParam("Tail") String tail,
                @QueryParam("Previous") Boolean previous,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ContainerApiResponse>> invokeContainerApi(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("ServiceManifestName") String serviceManifestName,
                @QueryParam("CodePackageName") String codePackageName,
                @QueryParam("CodePackageInstanceId") String codePackageInstanceId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ContainerApiRequestBody containerApiRequestBody,
                @HeaderParam("Accept") String accept);

        @Put("/ComposeDeployments/$/Create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createComposeDeployment(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") CreateComposeDeploymentDescription createComposeDeploymentDescription,
                @HeaderParam("Accept") String accept);

        @Get("/ComposeDeployments/{deploymentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ComposeDeploymentStatusInfo>> getComposeDeploymentStatus(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ComposeDeployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedComposeDeploymentStatusInfoList>> getComposeDeploymentStatusList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ComposeDeploymentUpgradeProgressInfo>> getComposeDeploymentUpgradeProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/ComposeDeployments/{deploymentName}/$/Delete")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> removeComposeDeployment(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/ComposeDeployments/{deploymentName}/$/Upgrade")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startComposeDeploymentUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription,
                @HeaderParam("Accept") String accept);

        @Post("/ComposeDeployments/{deploymentName}/$/RollbackUpgrade")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startRollbackComposeDeploymentUpgrade(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "deploymentName", encoded = true) String deploymentName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Tools/Chaos")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Chaos>> getChaos(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Tools/Chaos/$/Start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startChaos(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ChaosParameters chaosParameters,
                @HeaderParam("Accept") String accept);

        @Post("/Tools/Chaos/$/Stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> stopChaos(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Tools/Chaos/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ChaosEventsSegment>> getChaosEvents(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Tools/Chaos/Schedule")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ChaosScheduleDescription>> getChaosSchedule(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Tools/Chaos/Schedule")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> postChaosSchedule(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ChaosScheduleDescription chaosSchedule,
                @HeaderParam("Accept") String accept);

        @Put("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> uploadFile(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ImageStoreContent>> getImageStoreContent(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Delete("/ImageStore/{contentPath}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteImageStoreContent(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ImageStoreContent>> getImageStoreRootContent(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/ImageStore/$/Copy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> copyImageStoreContent(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") ImageStoreCopyDescription imageStoreCopyDescription,
                @HeaderParam("Accept") String accept);

        @Delete("/ImageStore/$/DeleteUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteImageStoreUploadSession(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("session-id") UUID sessionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/ImageStore/$/CommitUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> commitImageStoreUploadSession(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("session-id") UUID sessionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/$/GetUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<UploadSession>> getImageStoreUploadSessionById(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("session-id") UUID sessionId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/{contentPath}/$/GetUploadSession")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<UploadSession>> getImageStoreUploadSessionByPath(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Put("/ImageStore/{contentPath}/$/UploadChunk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> uploadFileChunk(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("session-id") UUID sessionId,
                @HeaderParam("Content-Range") String contentRange,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/$/FolderSize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<FolderSizeInfo>> getImageStoreRootFolderSize(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/{contentPath}/$/FolderSize")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<FolderSizeInfo>> getImageStoreFolderSize(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("contentPath") String contentPath,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/ImageStore/$/Info")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<ImageStoreInfo>> getImageStoreInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/$/InvokeInfrastructureCommand")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<String>> invokeInfrastructureCommand(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("Command") String command,
                @QueryParam("ServiceId") String serviceId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/$/InvokeInfrastructureQuery")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<String>> invokeInfrastructureQuery(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("Command") String command,
                @QueryParam("ServiceId") String serviceId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startDataLoss(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("DataLossMode") DataLossMode dataLossMode,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionDataLossProgress>> getDataLossProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startQuorumLoss(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("QuorumLossMode") QuorumLossMode quorumLossMode,
                @QueryParam("QuorumLossDuration") int quorumLossDuration,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionQuorumLossProgress>> getQuorumLossProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startPartitionRestart(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("RestartPartitionMode") RestartPartitionMode restartPartitionMode,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionRestartProgress>> getPartitionRestartProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Faults/Nodes/{nodeName}/$/StartTransition/")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> startNodeTransition(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("NodeTransitionType") NodeTransitionType nodeTransitionType,
                @QueryParam("NodeInstanceId") String nodeInstanceId,
                @QueryParam("StopDurationInSeconds") int stopDurationInSeconds,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Faults/Nodes/{nodeName}/$/GetTransitionProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<NodeTransitionProgress>> getNodeTransitionProgress(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Faults/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<OperationStatus>>> getFaultOperationList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("TypeFilter") int typeFilter,
                @QueryParam("StateFilter") int stateFilter,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Faults/$/Cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("OperationId") UUID operationId,
                @QueryParam("Force") boolean force,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/BackupRestore/BackupPolicies/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createBackupPolicy(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("ValidateConnection") Boolean validateConnection,
                @BodyParam("application/json") BackupPolicyDescription backupPolicyDescription,
                @HeaderParam("Accept") String accept);

        @Post("/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteBackupPolicy(
                @HostParam("$host") HostOptions host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/BackupRestore/BackupPolicies")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupPolicyDescriptionList>> getBackupPolicyList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/BackupRestore/BackupPolicies/{backupPolicyName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<BackupPolicyDescription>> getBackupPolicyByName(
                @HostParam("$host") HostOptions host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupEntityList>> getAllEntitiesBackedUpByPolicy(
                @HostParam("$host") HostOptions host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> updateBackupPolicy(
                @HostParam("$host") HostOptions host,
                @PathParam("backupPolicyName") String backupPolicyName,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("ValidateConnection") Boolean validateConnection,
                @BodyParam("application/json") BackupPolicyDescription backupPolicyDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> enableApplicationBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") EnableBackupDescription enableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> disableApplicationBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") DisableBackupDescription disableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupConfigurationInfoList>> getApplicationBackupConfigurationInfo(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Applications/{applicationId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupInfoList>> getApplicationBackupList(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("Latest") Boolean latest,
                @QueryParam("StartDateTimeFilter") OffsetDateTime startDateTimeFilter,
                @QueryParam("EndDateTimeFilter") OffsetDateTime endDateTimeFilter,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> suspendApplicationBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Applications/{applicationId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resumeApplicationBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> enableServiceBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") EnableBackupDescription enableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> disableServiceBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") DisableBackupDescription disableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupConfigurationInfoList>> getServiceBackupConfigurationInfo(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Services/{serviceId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupInfoList>> getServiceBackupList(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("Latest") Boolean latest,
                @QueryParam("StartDateTimeFilter") OffsetDateTime startDateTimeFilter,
                @QueryParam("EndDateTimeFilter") OffsetDateTime endDateTimeFilter,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> suspendServiceBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Services/{serviceId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resumeServiceBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/EnableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> enablePartitionBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") EnableBackupDescription enableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/DisableBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> disablePartitionBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") DisableBackupDescription disableBackupDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetBackupConfigurationInfo")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PartitionBackupConfigurationInfo>> getPartitionBackupConfigurationInfo(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupInfoList>> getPartitionBackupList(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("Latest") Boolean latest,
                @QueryParam("StartDateTimeFilter") OffsetDateTime startDateTimeFilter,
                @QueryParam("EndDateTimeFilter") OffsetDateTime endDateTimeFilter,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/SuspendBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> suspendPartitionBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/ResumeBackup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> resumePartitionBackup(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/Backup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> backupPartition(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("BackupTimeout") Integer backupTimeout,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") BackupPartitionDescription backupPartitionDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetBackupProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<BackupProgressInfo>> getPartitionBackupProgress(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Partitions/{partitionId}/$/Restore")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> restorePartition(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("RestoreTimeout") Integer restoreTimeout,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") RestorePartitionDescription restorePartitionDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Partitions/{partitionId}/$/GetRestoreProgress")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<RestoreProgressInfo>> getPartitionRestoreProgress(
                @HostParam("$host") HostOptions host,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/BackupRestore/$/GetBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedBackupInfoList>> getBackupsFromBackupLocation(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("MaxResults") Long maxResults,
                @BodyParam("application/json") GetBackupByStorageQueryDescription getBackupByStorageQueryDescription,
                @HeaderParam("Accept") String accept);

        @Post("/Names/$/Create")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> createName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") NameDescription nameDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Names/{nameId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> getNameExistsInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Delete("/Names/{nameId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteName(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Names/{nameId}/$/GetSubNames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedSubNameInfoList>> getSubNameInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("Recursive") Boolean recursive,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Get("/Names/{nameId}/$/GetProperties")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PagedPropertyInfoList>> getPropertyInfoList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("IncludeValues") Boolean includeValues,
                @QueryParam(value = "ContinuationToken", encoded = true) String continuationToken,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Put("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> putProperty(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") PropertyDescription propertyDescription,
                @HeaderParam("Accept") String accept);

        @Get("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PropertyInfo>> getPropertyInfo(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("PropertyName") String propertyName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Delete("/Names/{nameId}/$/GetProperty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<Void>> deleteProperty(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("PropertyName") String propertyName,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);

        @Post("/Names/{nameId}/$/GetProperties/$/SubmitBatch")
        @ExpectedResponses({200, 409})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<PropertyBatchInfo>> submitPropertyBatch(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "nameId", encoded = true) String nameId,
                @QueryParam("timeout") Long timeout,
                @BodyParam("application/json") PropertyBatchDescriptionList propertyBatchDescriptionList,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Cluster/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ClusterEvent>>> getClusterEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Containers/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ContainerInstanceEvent>>> getContainersEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Nodes/{nodeName}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<NodeEvent>>> getNodeEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("nodeName") String nodeName,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Nodes/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<NodeEvent>>> getNodesEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Applications/{applicationId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ApplicationEvent>>> getApplicationEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "applicationId", encoded = true) String applicationId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Applications/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ApplicationEvent>>> getApplicationsEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Services/{serviceId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ServiceEvent>>> getServiceEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "serviceId", encoded = true) String serviceId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Services/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ServiceEvent>>> getServicesEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Partitions/{partitionId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<PartitionEvent>>> getPartitionEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Partitions/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<PartitionEvent>>> getPartitionsEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ReplicaEvent>>> getPartitionReplicaEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @PathParam(value = "replicaId", encoded = true) String replicaId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/Partitions/{partitionId}/$/Replicas/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<ReplicaEvent>>> getPartitionReplicasEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam(value = "partitionId", encoded = true) UUID partitionId,
                @QueryParam("timeout") Long timeout,
                @QueryParam("StartTimeUtc") String startTimeUtc,
                @QueryParam("EndTimeUtc") String endTimeUtc,
                @QueryParam("EventsTypesFilter") String eventsTypesFilter,
                @QueryParam("ExcludeAnalysisEvents") Boolean excludeAnalysisEvents,
                @QueryParam("SkipCorrelationLookup") Boolean skipCorrelationLookup,
                @HeaderParam("Accept") String accept);

        @Get("/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(FabricErrorException.class)
        Mono<Response<List<FabricEvent>>> getCorrelatedEventList(
                @HostParam("$host") HostOptions host,
                @QueryParam("api-version") String apiVersion,
                @PathParam("eventInstanceId") String eventInstanceId,
                @QueryParam("timeout") Long timeout,
                @HeaderParam("Accept") String accept);
    }

    /**
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
     * different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p>These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
     * However, most of the information in the cluster manifest is generated internally by service fabric during cluster
     * deployment in other deployment scenarios (e.g. when using Azure portal).
     *
     * <p>The contents of the cluster manifest are for informational purposes only and users are not expected to take a
     * dependency on the format of the file contents or its interpretation.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric cluster manifest along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterManifest>> getClusterManifestWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getClusterManifest(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include
     * different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * <p>These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster.
     * However, most of the information in the cluster manifest is generated internally by service fabric during cluster
     * deployment in other deployment scenarios (e.g. when using Azure portal).
     *
     * <p>The contents of the cluster manifest are for informational purposes only and users are not expected to take a
     * dependency on the format of the file contents or its interpretation.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric cluster manifest on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterManifest> getClusterManifestAsync(Long timeout) {
        return getClusterManifestWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state.
     *
     * @param nodesHealthStateFilter Allows filtering of the node health state objects returned in the result of cluster
     *     health query based on their health state. The possible values for this parameter include integer value of one
     *     of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate
     *     the aggregated health state. If not specified, all entries are returned. The state values are flag-based
     *     enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For
     *     example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning
     *     (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param applicationsHealthStateFilter Allows filtering of the application health state objects returned in the
     *     result of cluster health query based on their health state. The possible values for this parameter include
     *     integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only
     *     applications that match the filter are returned. All applications are used to evaluate the aggregated health
     *     state. If not specified, all entries are returned. The state values are flag-based enumeration, so the value
     *     could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided
     *     value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param includeSystemApplicationHealthStatistics Indicates whether the health statistics should include the
     *     fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics
     *     is set to true, the health statistics include the entities that belong to the fabric:/System application.
     *     Otherwise, the query result includes health statistics only for user applications. The health statistics must
     *     be included in the query result for this parameter to be applied.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterHealth>> getClusterHealthWithResponseAsync(
            Integer nodesHealthStateFilter,
            Integer applicationsHealthStateFilter,
            Integer eventsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Boolean includeSystemApplicationHealthStatistics,
            Long timeout) {
        final String accept = "application/json";
        return service.getClusterHealth(
                this.getHost(),
                this.getApiVersion(),
                nodesHealthStateFilter,
                applicationsHealthStateFilter,
                eventsHealthStateFilter,
                excludeHealthStatistics,
                includeSystemApplicationHealthStatistics,
                timeout,
                accept);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state.
     *
     * @param nodesHealthStateFilter Allows filtering of the node health state objects returned in the result of cluster
     *     health query based on their health state. The possible values for this parameter include integer value of one
     *     of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate
     *     the aggregated health state. If not specified, all entries are returned. The state values are flag-based
     *     enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For
     *     example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning
     *     (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param applicationsHealthStateFilter Allows filtering of the application health state objects returned in the
     *     result of cluster health query based on their health state. The possible values for this parameter include
     *     integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only
     *     applications that match the filter are returned. All applications are used to evaluate the aggregated health
     *     state. If not specified, all entries are returned. The state values are flag-based enumeration, so the value
     *     could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided
     *     value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param includeSystemApplicationHealthStatistics Indicates whether the health statistics should include the
     *     fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics
     *     is set to true, the health statistics include the entities that belong to the fabric:/System application.
     *     Otherwise, the query result includes health statistics only for user applications. The health statistics must
     *     be included in the query result for this parameter to be applied.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterHealth> getClusterHealthAsync(
            Integer nodesHealthStateFilter,
            Integer applicationsHealthStateFilter,
            Integer eventsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Boolean includeSystemApplicationHealthStatistics,
            Long timeout) {
        return getClusterHealthWithResponseAsync(
                        nodesHealthStateFilter,
                        applicationsHealthStateFilter,
                        eventsHealthStateFilter,
                        excludeHealthStatistics,
                        includeSystemApplicationHealthStatistics,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the
     * health policies used to evaluate the health.
     *
     * @param nodesHealthStateFilter Allows filtering of the node health state objects returned in the result of cluster
     *     health query based on their health state. The possible values for this parameter include integer value of one
     *     of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate
     *     the aggregated health state. If not specified, all entries are returned. The state values are flag-based
     *     enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For
     *     example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning
     *     (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param applicationsHealthStateFilter Allows filtering of the application health state objects returned in the
     *     result of cluster health query based on their health state. The possible values for this parameter include
     *     integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only
     *     applications that match the filter are returned. All applications are used to evaluate the aggregated health
     *     state. If not specified, all entries are returned. The state values are flag-based enumeration, so the value
     *     could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided
     *     value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param includeSystemApplicationHealthStatistics Indicates whether the health statistics should include the
     *     fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics
     *     is set to true, the health statistics include the entities that belong to the fabric:/System application.
     *     Otherwise, the query result includes health statistics only for user applications. The health statistics must
     *     be included in the query result for this parameter to be applied.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthPolicies Describes the health policies used to evaluate the cluster health. If not present,
     *     the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster
     *     health policy. By default, each application is evaluated using its specific application health policy,
     *     defined in the application manifest, or the default health policy, if no policy is defined in manifest. If
     *     the application health policy map is specified, and it has an entry for an application, the specified
     *     application health policy is used to evaluate the application health.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterHealth>> getClusterHealthUsingPolicyWithResponseAsync(
            Integer nodesHealthStateFilter,
            Integer applicationsHealthStateFilter,
            Integer eventsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Boolean includeSystemApplicationHealthStatistics,
            Long timeout,
            ClusterHealthPolicies clusterHealthPolicies) {
        final String accept = "application/json";
        return service.getClusterHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                nodesHealthStateFilter,
                applicationsHealthStateFilter,
                eventsHealthStateFilter,
                excludeHealthStatistics,
                includeSystemApplicationHealthStatistics,
                timeout,
                clusterHealthPolicies,
                accept);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes
     * and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the
     * health policies used to evaluate the health.
     *
     * @param nodesHealthStateFilter Allows filtering of the node health state objects returned in the result of cluster
     *     health query based on their health state. The possible values for this parameter include integer value of one
     *     of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate
     *     the aggregated health state. If not specified, all entries are returned. The state values are flag-based
     *     enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For
     *     example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning
     *     (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param applicationsHealthStateFilter Allows filtering of the application health state objects returned in the
     *     result of cluster health query based on their health state. The possible values for this parameter include
     *     integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only
     *     applications that match the filter are returned. All applications are used to evaluate the aggregated health
     *     state. If not specified, all entries are returned. The state values are flag-based enumeration, so the value
     *     could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided
     *     value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param includeSystemApplicationHealthStatistics Indicates whether the health statistics should include the
     *     fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics
     *     is set to true, the health statistics include the entities that belong to the fabric:/System application.
     *     Otherwise, the query result includes health statistics only for user applications. The health statistics must
     *     be included in the query result for this parameter to be applied.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthPolicies Describes the health policies used to evaluate the cluster health. If not present,
     *     the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster
     *     health policy. By default, each application is evaluated using its specific application health policy,
     *     defined in the application manifest, or the default health policy, if no policy is defined in manifest. If
     *     the application health policy map is specified, and it has an entry for an application, the specified
     *     application health policy is used to evaluate the application health.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the cluster. Contains the cluster aggregated health state, the cluster
     *     application and node health states as well as the health events and the unhealthy evaluations on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterHealth> getClusterHealthUsingPolicyAsync(
            Integer nodesHealthStateFilter,
            Integer applicationsHealthStateFilter,
            Integer eventsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Boolean includeSystemApplicationHealthStatistics,
            Long timeout,
            ClusterHealthPolicies clusterHealthPolicies) {
        return getClusterHealthUsingPolicyWithResponseAsync(
                        nodesHealthStateFilter,
                        applicationsHealthStateFilter,
                        eventsHealthStateFilter,
                        excludeHealthStatistics,
                        includeSystemApplicationHealthStatistics,
                        timeout,
                        clusterHealthPolicies)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
     * cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some
     * of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterHealthChunk>> getClusterHealthChunkWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getClusterHealthChunk(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the
     * cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some
     * of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric cluster using health chunks on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterHealthChunk> getClusterHealthChunkAsync(Long timeout) {
        return getClusterHealthChunkWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
     * cluster health chunk query description. The query description allows users to specify health policies for
     * evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities
     * to return. The selection can be done based on the entities health state and based on the hierarchy. The query can
     * return multi-level children of the entities based on the specified filters. For example, it can return one
     * application with a specified name, and for this application, return only services that are in Error or Warning,
     * and all partitions and replicas for one of these services.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthChunkQueryDescription Describes the cluster and application health policies used to evaluate
     *     the cluster health and the filters to select which cluster entities to be returned. If the cluster health
     *     policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the
     *     health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster
     *     health policy. By default, each application is evaluated using its specific application health policy,
     *     defined in the application manifest, or the default health policy, if no policy is defined in manifest. If
     *     the application health policy map is specified, and it has an entry for an application, the specified
     *     application health policy is used to evaluate the application health. Users can specify very flexible filters
     *     to select which cluster entities to include in response. The selection can be done based on the entities
     *     health state and based on the hierarchy. The query can return multi-level children of the entities based on
     *     the specified filters. For example, it can return one application with a specified name, and for this
     *     application, return only services that are in Error or Warning, and all partitions and replicas for one of
     *     these services.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric cluster using health chunks along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterHealthChunk>> getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponseAsync(
            Long timeout, ClusterHealthChunkQueryDescription clusterHealthChunkQueryDescription) {
        final String accept = "application/json";
        return service.getClusterHealthChunkUsingPolicyAndAdvancedFilters(
                this.getHost(), this.getApiVersion(), timeout, clusterHealthChunkQueryDescription, accept);
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input
     * cluster health chunk query description. The query description allows users to specify health policies for
     * evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities
     * to return. The selection can be done based on the entities health state and based on the hierarchy. The query can
     * return multi-level children of the entities based on the specified filters. For example, it can return one
     * application with a specified name, and for this application, return only services that are in Error or Warning,
     * and all partitions and replicas for one of these services.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthChunkQueryDescription Describes the cluster and application health policies used to evaluate
     *     the cluster health and the filters to select which cluster entities to be returned. If the cluster health
     *     policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the
     *     health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster
     *     health policy. By default, each application is evaluated using its specific application health policy,
     *     defined in the application manifest, or the default health policy, if no policy is defined in manifest. If
     *     the application health policy map is specified, and it has an entry for an application, the specified
     *     application health policy is used to evaluate the application health. Users can specify very flexible filters
     *     to select which cluster entities to include in response. The selection can be done based on the entities
     *     health state and based on the hierarchy. The query can return multi-level children of the entities based on
     *     the specified filters. For example, it can return one application with a specified name, and for this
     *     application, return only services that are in Error or Warning, and all partitions and replicas for one of
     *     these services.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric cluster using health chunks on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterHealthChunk> getClusterHealthChunkUsingPolicyAndAdvancedFiltersAsync(
            Long timeout, ClusterHealthChunkQueryDescription clusterHealthChunkQueryDescription) {
        return getClusterHealthChunkUsingPolicyAndAdvancedFiltersWithResponseAsync(
                        timeout, clusterHealthChunkQueryDescription)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of
     * the health report and property on which it is reported. The report is sent to a Service Fabric gateway node,
     * which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store
     * after extra validation. For example, the health store may reject the report because of an invalid parameter, like
     * a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and
     * check that the report appears in the HealthEvents section.
     *
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportClusterHealthWithResponseAsync(
            HealthInformation healthInformation, Boolean immediate, Long timeout) {
        final String accept = "application/json";
        return service.reportClusterHealth(
                this.getHost(), this.getApiVersion(), immediate, timeout, healthInformation, accept);
    }

    /**
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of
     * the health report and property on which it is reported. The report is sent to a Service Fabric gateway node,
     * which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store
     * after extra validation. For example, the health store may reject the report because of an invalid parameter, like
     * a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and
     * check that the report appears in the HealthEvents section.
     *
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportClusterHealthAsync(HealthInformation healthInformation, Boolean immediate, Long timeout) {
        return reportClusterHealthWithResponseAsync(healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
     * CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * @param codeVersion The product version of Service Fabric.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of information about fabric code versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<FabricCodeVersionInfo>>> getProvisionedFabricCodeVersionInfoListWithResponseAsync(
            String codeVersion, Long timeout) {
        final String accept = "application/json";
        return service.getProvisionedFabricCodeVersionInfoList(
                this.getHost(), this.getApiVersion(), codeVersion, timeout, accept);
    }

    /**
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter
     * CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * @param codeVersion The product version of Service Fabric.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of information about fabric code versions that are provisioned in the cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FabricCodeVersionInfo>> getProvisionedFabricCodeVersionInfoListAsync(
            String codeVersion, Long timeout) {
        return getProvisionedFabricCodeVersionInfoListWithResponseAsync(codeVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
     * ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * @param configVersion The config version of Service Fabric.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of information about fabric config versions that are provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<FabricConfigVersionInfo>>> getProvisionedFabricConfigVersionInfoListWithResponseAsync(
            String configVersion, Long timeout) {
        final String accept = "application/json";
        return service.getProvisionedFabricConfigVersionInfoList(
                this.getHost(), this.getApiVersion(), configVersion, timeout, accept);
    }

    /**
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter
     * ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * @param configVersion The config version of Service Fabric.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of information about fabric config versions that are provisioned in the cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FabricConfigVersionInfo>> getProvisionedFabricConfigVersionInfoListAsync(
            String configVersion, Long timeout) {
        return getProvisionedFabricConfigVersionInfoListWithResponseAsync(configVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
     * state of the previous cluster upgrade.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current progress of the ongoing cluster upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterUpgradeProgressObject>> getClusterUpgradeProgressWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getClusterUpgradeProgress(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last
     * state of the previous cluster upgrade.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current progress of the ongoing cluster upgrade on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterUpgradeProgressObject> getClusterUpgradeProgressAsync(Long timeout) {
        return getClusterUpgradeProgressWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The cluster configuration contains properties of the cluster that include different node types on the cluster,
     * security configurations, fault, and upgrade domain topologies, etc.
     *
     * @param configurationApiVersion The API version of the Standalone cluster json configuration.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the standalone cluster configuration along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterConfiguration>> getClusterConfigurationWithResponseAsync(
            String configurationApiVersion, Long timeout) {
        final String accept = "application/json";
        return service.getClusterConfiguration(
                this.getHost(), this.getApiVersion(), configurationApiVersion, timeout, accept);
    }

    /**
     * The cluster configuration contains properties of the cluster that include different node types on the cluster,
     * security configurations, fault, and upgrade domain topologies, etc.
     *
     * @param configurationApiVersion The API version of the Standalone cluster json configuration.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the standalone cluster configuration on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterConfiguration> getClusterConfigurationAsync(String configurationApiVersion, Long timeout) {
        return getClusterConfigurationWithResponseAsync(configurationApiVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster configuration upgrade status details of a Service Fabric standalone cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterConfigurationUpgradeStatusInfo>> getClusterConfigurationUpgradeStatusWithResponseAsync(
            Long timeout) {
        final String accept = "application/json";
        return service.getClusterConfigurationUpgradeStatus(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster configuration upgrade status details of a Service Fabric standalone cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterConfigurationUpgradeStatusInfo> getClusterConfigurationUpgradeStatusAsync(Long timeout) {
        return getClusterConfigurationUpgradeStatusWithResponseAsync(timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the service state of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpgradeOrchestrationServiceState>> getUpgradeOrchestrationServiceStateWithResponseAsync(
            Long timeout) {
        final String accept = "application/json";
        return service.getUpgradeOrchestrationServiceState(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the service state of Service Fabric Upgrade Orchestration Service on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpgradeOrchestrationServiceState> getUpgradeOrchestrationServiceStateAsync(Long timeout) {
        return getUpgradeOrchestrationServiceStateWithResponseAsync(timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service state summary of Service Fabric Upgrade Orchestration Service along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpgradeOrchestrationServiceStateSummary>> setUpgradeOrchestrationServiceStateWithResponseAsync(
            UpgradeOrchestrationServiceState upgradeOrchestrationServiceState, Long timeout) {
        final String accept = "application/json";
        return service.setUpgradeOrchestrationServiceState(
                this.getHost(), this.getApiVersion(), timeout, upgradeOrchestrationServiceState, accept);
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support
     * purposes.
     *
     * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service state summary of Service Fabric Upgrade Orchestration Service on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpgradeOrchestrationServiceStateSummary> setUpgradeOrchestrationServiceStateAsync(
            UpgradeOrchestrationServiceState upgradeOrchestrationServiceState, Long timeout) {
        return setUpgradeOrchestrationServiceStateWithResponseAsync(upgradeOrchestrationServiceState, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionClusterWithResponseAsync(
            ProvisionFabricDescription provisionFabricDescription, Long timeout) {
        final String accept = "application/json";
        return service.provisionCluster(
                this.getHost(), this.getApiVersion(), timeout, provisionFabricDescription, accept);
    }

    /**
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> provisionClusterAsync(ProvisionFabricDescription provisionFabricDescription, Long timeout) {
        return provisionClusterWithResponseAsync(provisionFabricDescription, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * It is supported to unprovision code and configuration separately.
     *
     * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionClusterWithResponseAsync(
            UnprovisionFabricDescription unprovisionFabricDescription, Long timeout) {
        final String accept = "application/json";
        return service.unprovisionCluster(
                this.getHost(), this.getApiVersion(), timeout, unprovisionFabricDescription, accept);
    }

    /**
     * It is supported to unprovision code and configuration separately.
     *
     * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unprovisionClusterAsync(UnprovisionFabricDescription unprovisionFabricDescription, Long timeout) {
        return unprovisionClusterWithResponseAsync(unprovisionFabricDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackClusterUpgradeWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.rollbackClusterUpgrade(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rollbackClusterUpgradeAsync(Long timeout) {
        return rollbackClusterUpgradeWithResponseAsync(timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeClusterUpgradeWithResponseAsync(
            ResumeClusterUpgradeDescription resumeClusterUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.resumeClusterUpgrade(
                this.getHost(), this.getApiVersion(), timeout, resumeClusterUpgradeDescription, accept);
    }

    /**
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeClusterUpgradeAsync(
            ResumeClusterUpgradeDescription resumeClusterUpgradeDescription, Long timeout) {
        return resumeClusterUpgradeWithResponseAsync(resumeClusterUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service
     * Fabric cluster if the parameters are valid.
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterUpgradeWithResponseAsync(
            StartClusterUpgradeDescription startClusterUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.startClusterUpgrade(
                this.getHost(), this.getApiVersion(), timeout, startClusterUpgradeDescription, accept);
    }

    /**
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service
     * Fabric cluster if the parameters are valid.
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startClusterUpgradeAsync(
            StartClusterUpgradeDescription startClusterUpgradeDescription, Long timeout) {
        return startClusterUpgradeWithResponseAsync(startClusterUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
     * parameters are valid.
     *
     * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startClusterConfigurationUpgradeWithResponseAsync(
            ClusterConfigurationUpgradeDescription clusterConfigurationUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.startClusterConfigurationUpgrade(
                this.getHost(), this.getApiVersion(), timeout, clusterConfigurationUpgradeDescription, accept);
    }

    /**
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the
     * parameters are valid.
     *
     * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startClusterConfigurationUpgradeAsync(
            ClusterConfigurationUpgradeDescription clusterConfigurationUpgradeDescription, Long timeout) {
        return startClusterConfigurationUpgradeWithResponseAsync(clusterConfigurationUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClusterUpgradeWithResponseAsync(
            UpdateClusterUpgradeDescription updateClusterUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.updateClusterUpgrade(
                this.getHost(), this.getApiVersion(), timeout, updateClusterUpgradeDescription, accept);
    }

    /**
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateClusterUpgradeAsync(
            UpdateClusterUpgradeDescription updateClusterUpgradeDescription, Long timeout) {
        return updateClusterUpgradeWithResponseAsync(updateClusterUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be
     * called separately. It provides information needed to set up an Azure Active Directory secured connection with a
     * Service Fabric cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to
     *     be called separately along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AadMetadataObject>> getAadMetadataWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getAadMetadata(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be
     * called separately. It provides information needed to set up an Azure Active Directory secured connection with a
     * Service Fabric cluster.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to
     *     be called separately on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AadMetadataObject> getAadMetadataAsync(Long timeout) {
        return getAadMetadataWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
     * cluster runtime versions.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster version along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterVersion>> getClusterVersionWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getClusterVersion(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target
     * cluster runtime versions.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the cluster version on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterVersion> getClusterVersionAsync(Long timeout) {
        return getClusterVersionWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity
     * defined.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about load in a Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ClusterLoadInfo>> getClusterLoadWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getClusterLoad(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or capacity
     * defined.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about load in a Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClusterLoadInfo> getClusterLoadAsync(Long timeout) {
        return getClusterLoadWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
     * dropped. If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or
     * dropped.
     *
     * @param enabled The verbosity of service placement health reporting.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> toggleVerboseServicePlacementHealthReportingWithResponseAsync(
            boolean enabled, Long timeout) {
        final String accept = "application/json";
        return service.toggleVerboseServicePlacementHealthReporting(
                this.getHost(), this.getApiVersion(), enabled, timeout, accept);
    }

    /**
     * If verbosity is set to true, then detailed health reports will be generated when replicas cannot be placed or
     * dropped. If verbosity is set to false, then no health reports will be generated when replicas cannot be placed or
     * dropped.
     *
     * @param enabled The verbosity of service placement health reporting.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> toggleVerboseServicePlacementHealthReportingAsync(boolean enabled, Long timeout) {
        return toggleVerboseServicePlacementHealthReportingWithResponseAsync(enabled, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Validate the supplied upgrade parameters and assess the expected impact of a code or configuration version
     * upgrade of a Service Fabric cluster. The upgrade will not be initiated.
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies result of validating a cluster upgrade along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ValidateClusterUpgradeResult>> validateClusterUpgradeWithResponseAsync(
            StartClusterUpgradeDescription startClusterUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.validateClusterUpgrade(
                this.getHost(), this.getApiVersion(), timeout, startClusterUpgradeDescription, accept);
    }

    /**
     * Validate the supplied upgrade parameters and assess the expected impact of a code or configuration version
     * upgrade of a Service Fabric cluster. The upgrade will not be initiated.
     *
     * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies result of validating a cluster upgrade on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ValidateClusterUpgradeResult> validateClusterUpgradeAsync(
            StartClusterUpgradeDescription startClusterUpgradeDescription, Long timeout) {
        return validateClusterUpgradeWithResponseAsync(startClusterUpgradeDescription, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param nodeStatusFilter Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the
     *     specified filter value will be returned. The filter value can be one of the following.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of nodes in the cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedNodeInfoList>> getNodeInfoListWithResponseAsync(
            String continuationToken, NodeStatusFilter nodeStatusFilter, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getNodeInfoList(
                this.getHost(), this.getApiVersion(), continuationToken, nodeStatusFilter, maxResults, timeout, accept);
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param nodeStatusFilter Allows filtering the nodes based on the NodeStatus. Only the nodes that are matching the
     *     specified filter value will be returned. The filter value can be one of the following.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of nodes in the cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedNodeInfoList> getNodeInfoListAsync(
            String continuationToken, NodeStatusFilter nodeStatusFilter, Long maxResults, Long timeout) {
        return getNodeInfoListWithResponseAsync(continuationToken, nodeStatusFilter, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a node in Service Fabric cluster along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NodeInfo>> getNodeInfoWithResponseAsync(String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.getNodeInfo(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a node in Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NodeInfo> getNodeInfoAsync(String nodeName, Long timeout) {
        return getNodeInfoWithResponseAsync(nodeName, timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. If the node that you specify by name does not exist in the health
     * store, this returns an error.
     *
     * @param nodeName The name of the node.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NodeHealth>> getNodeHealthWithResponseAsync(
            String nodeName, Integer eventsHealthStateFilter, Long timeout) {
        final String accept = "application/json";
        return service.getNodeHealth(
                this.getHost(), this.getApiVersion(), nodeName, eventsHealthStateFilter, timeout, accept);
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. If the node that you specify by name does not exist in the health
     * store, this returns an error.
     *
     * @param nodeName The name of the node.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NodeHealth> getNodeHealthAsync(String nodeName, Integer eventsHealthStateFilter, Long timeout) {
        return getNodeHealthWithResponseAsync(nodeName, eventsHealthStateFilter, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
     * policies used to evaluate the health. If the node that you specify by name does not exist in the health store,
     * this returns an error.
     *
     * @param nodeName The name of the node.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthPolicy Describes the health policies used to evaluate the health of a cluster or node. If not
     *     present, the health evaluation uses the health policy from cluster manifest or the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NodeHealth>> getNodeHealthUsingPolicyWithResponseAsync(
            String nodeName, Integer eventsHealthStateFilter, Long timeout, ClusterHealthPolicy clusterHealthPolicy) {
        final String accept = "application/json";
        return service.getNodeHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                eventsHealthStateFilter,
                timeout,
                clusterHealthPolicy,
                accept);
    }

    /**
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events
     * reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health
     * policies used to evaluate the health. If the node that you specify by name does not exist in the health store,
     * this returns an error.
     *
     * @param nodeName The name of the node.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param clusterHealthPolicy Describes the health policies used to evaluate the health of a cluster or node. If not
     *     present, the health evaluation uses the health policy from cluster manifest or the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NodeHealth> getNodeHealthUsingPolicyAsync(
            String nodeName, Integer eventsHealthStateFilter, Long timeout, ClusterHealthPolicy clusterHealthPolicy) {
        return getNodeHealthUsingPolicyWithResponseAsync(
                        nodeName, eventsHealthStateFilter, timeout, clusterHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the specified Service Fabric node. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health
     * store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * @param nodeName The name of the node.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportNodeHealthWithResponseAsync(
            String nodeName, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        final String accept = "application/json";
        return service.reportNodeHealth(
                this.getHost(), this.getApiVersion(), nodeName, immediate, timeout, healthInformation, accept);
    }

    /**
     * Reports health state of the specified Service Fabric node. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health
     * store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * @param nodeName The name of the node.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportNodeHealthAsync(
            String nodeName, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        return reportNodeHealthWithResponseAsync(nodeName, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about load on a Service Fabric node along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NodeLoadInfo>> getNodeLoadInfoWithResponseAsync(String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.getNodeLoadInfo(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about load on a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NodeLoadInfo> getNodeLoadInfoAsync(String nodeName, Long timeout) {
        return getNodeLoadInfoWithResponseAsync(nodeName, timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
     * progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated
     * with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be
     * reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not
     * complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still
     * need to be reactivated before services will be placed on that node.
     *
     * @param nodeName The name of the node.
     * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableNodeWithResponseAsync(
            String nodeName, DeactivationIntentDescription deactivationIntentDescription, Long timeout) {
        final String accept = "application/json";
        return service.disableNode(
                this.getHost(), this.getApiVersion(), nodeName, timeout, deactivationIntentDescription, accept);
    }

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in
     * progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated
     * with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be
     * reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not
     * complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still
     * need to be reactivated before services will be placed on that node.
     *
     * @param nodeName The name of the node.
     * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableNodeAsync(
            String nodeName, DeactivationIntentDescription deactivationIntentDescription, Long timeout) {
        return disableNodeWithResponseAsync(nodeName, deactivationIntentDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become
     * a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableNodeWithResponseAsync(String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.enableNode(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become
     * a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> enableNodeAsync(String nodeName, Long timeout) {
        return enableNodeWithResponseAsync(nodeName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a
     * hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be
     * successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that
     * Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the
     * node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5,
     * in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
     * this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service
     * Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of
     * non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more
     * nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to
     * come back up with its state intact, please remove the node from the cluster, see
     * https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeStateWithResponseAsync(String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.removeNodeState(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a
     * hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be
     * successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that
     * Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the
     * node has not been removed and the node can come back up with its state intact. Starting from Service Fabric 6.5,
     * in order to use this API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
     * this API to remove the node state. If the cluster is running on Azure, after the seed node goes down, Service
     * Fabric will try to change it to a non-seed node automatically. To make this happen, make sure the number of
     * non-seed nodes in the primary node type is no less than the number of Down seed nodes. If necessary, add more
     * nodes to the primary node type to achieve this. For standalone cluster, if the Down seed node is not expected to
     * come back up with its state intact, please remove the node from the cluster, see
     * https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeNodeStateAsync(String nodeName, Long timeout) {
        return removeNodeStateWithResponseAsync(nodeName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Restarts a Service Fabric cluster node that is already started.
     *
     * @param nodeName The name of the node.
     * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the need to take
     *     dump of the fabric process.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartNodeWithResponseAsync(
            String nodeName, RestartNodeDescription restartNodeDescription, Long timeout) {
        final String accept = "application/json";
        return service.restartNode(
                this.getHost(), this.getApiVersion(), nodeName, timeout, restartNodeDescription, accept);
    }

    /**
     * Restarts a Service Fabric cluster node that is already started.
     *
     * @param nodeName The name of the node.
     * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the need to take
     *     dump of the fabric process.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartNodeAsync(String nodeName, RestartNodeDescription restartNodeDescription, Long timeout) {
        return restartNodeWithResponseAsync(nodeName, restartNodeDescription, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This api allows removing all existing configuration overrides on specified node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConfigurationOverridesWithResponseAsync(String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.removeConfigurationOverrides(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * This api allows removing all existing configuration overrides on specified node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeConfigurationOverridesAsync(String nodeName, Long timeout) {
        return removeConfigurationOverridesWithResponseAsync(nodeName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This api allows getting all existing configuration overrides on the specified node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list that contains parameters, sections that they belong and their values along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ConfigParameterOverride>>> getConfigurationOverridesWithResponseAsync(
            String nodeName, Long timeout) {
        final String accept = "application/json";
        return service.getConfigurationOverrides(this.getHost(), this.getApiVersion(), nodeName, timeout, accept);
    }

    /**
     * This api allows getting all existing configuration overrides on the specified node.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list that contains parameters, sections that they belong and their values on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ConfigParameterOverride>> getConfigurationOverridesAsync(String nodeName, Long timeout) {
        return getConfigurationOverridesWithResponseAsync(nodeName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api allows adding all existing configuration overrides on the specified node.
     *
     * @param nodeName The name of the node.
     * @param configParameterOverrideList Description for adding list of configuration overrides.
     * @param force Force adding configuration overrides on specified nodes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConfigurationParameterOverridesWithResponseAsync(
            String nodeName, List<ConfigParameterOverride> configParameterOverrideList, Boolean force, Long timeout) {
        final String accept = "application/json";
        return service.addConfigurationParameterOverrides(
                this.getHost(), this.getApiVersion(), nodeName, force, timeout, configParameterOverrideList, accept);
    }

    /**
     * This api allows adding all existing configuration overrides on the specified node.
     *
     * @param nodeName The name of the node.
     * @param configParameterOverrideList Description for adding list of configuration overrides.
     * @param force Force adding configuration overrides on specified nodes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addConfigurationParameterOverridesAsync(
            String nodeName, List<ConfigParameterOverride> configParameterOverrideList, Boolean force, Long timeout) {
        return addConfigurationParameterOverridesWithResponseAsync(
                        nodeName, configParameterOverrideList, force, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This api allows removing set of tags from the specified node.
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeNodeTagsWithResponseAsync(String nodeName, List<String> nodeTags) {
        final String accept = "application/json";
        return service.removeNodeTags(this.getHost(), this.getApiVersion(), nodeName, nodeTags, accept);
    }

    /**
     * This api allows removing set of tags from the specified node.
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeNodeTagsAsync(String nodeName, List<String> nodeTags) {
        return removeNodeTagsWithResponseAsync(nodeName, nodeTags).flatMap(ignored -> Mono.empty());
    }

    /**
     * This api allows adding tags to the specified node.
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addNodeTagsWithResponseAsync(String nodeName, List<String> nodeTags) {
        final String accept = "application/json";
        return service.addNodeTags(this.getHost(), this.getApiVersion(), nodeName, nodeTags, accept);
    }

    /**
     * This api allows adding tags to the specified node.
     *
     * @param nodeName The name of the node.
     * @param nodeTags Description for adding list of node tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addNodeTagsAsync(String nodeName, List<String> nodeTags) {
        return addNodeTagsWithResponseAsync(nodeName, nodeTags).flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. Each version of an application type is returned as one application type. The
     * response includes the name, version, status, and other details about the application type. This is a paged query,
     * meaning that if not all of the application types fit in a page, one page of results is returned as well as a
     * continuation token, which can be used to get the next page. For example, if there are 10 application types but a
     * page only fits the first three application types, or if max results is set to 3, then three is returned. To
     * access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next
     * query. An empty continuation token is returned if there are no subsequent pages.
     *
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind which is the mechanism
     *     used to define a Service Fabric application type. - Default - Default value, which performs the same function
     *     as selecting "All". The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind
     *     value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with
     *     ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that
     *     matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedApplicationTypeInfoList>> getApplicationTypeInfoListWithResponseAsync(
            Integer applicationTypeDefinitionKindFilter,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        final String accept = "application/json";
        return service.getApplicationTypeInfoList(
                this.getHost(),
                this.getApiVersion(),
                applicationTypeDefinitionKindFilter,
                excludeApplicationParameters,
                continuationToken,
                maxResults,
                timeout,
                accept);
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. Each version of an application type is returned as one application type. The
     * response includes the name, version, status, and other details about the application type. This is a paged query,
     * meaning that if not all of the application types fit in a page, one page of results is returned as well as a
     * continuation token, which can be used to get the next page. For example, if there are 10 application types but a
     * page only fits the first three application types, or if max results is set to 3, then three is returned. To
     * access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next
     * query. An empty continuation token is returned if there are no subsequent pages.
     *
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind which is the mechanism
     *     used to define a Service Fabric application type. - Default - Default value, which performs the same function
     *     as selecting "All". The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind
     *     value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with
     *     ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that
     *     matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of application types that are provisioned or being provisioned in the cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedApplicationTypeInfoList> getApplicationTypeInfoListAsync(
            Integer applicationTypeDefinitionKindFilter,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        return getApplicationTypeInfoListWithResponseAsync(
                        applicationTypeDefinitionKindFilter,
                        excludeApplicationParameters,
                        continuationToken,
                        maxResults,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. These results are of application types whose name match exactly the one specified
     * as the parameter, and which comply with the given query parameters. All versions of the application type matching
     * the application type name are returned, with each version returned as one application type. The response includes
     * the name, version, status, and other details about the application type. This is a paged query, meaning that if
     * not all of the application types fit in a page, one page of results is returned as well as a continuation token,
     * which can be used to get the next page. For example, if there are 10 application types but a page only fits the
     * first three application types, or if max results is set to 3, then three is returned. To access the rest of the
     * results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
     * continuation token is returned if there are no subsequent pages.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of application types that are provisioned or being provisioned in the cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedApplicationTypeInfoList>> getApplicationTypeInfoListByNameWithResponseAsync(
            String applicationTypeName,
            String applicationTypeVersion,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        final String accept = "application/json";
        return service.getApplicationTypeInfoListByName(
                this.getHost(),
                this.getApiVersion(),
                applicationTypeName,
                applicationTypeVersion,
                excludeApplicationParameters,
                continuationToken,
                maxResults,
                timeout,
                accept);
    }

    /**
     * Returns the information about the application types that are provisioned or in the process of being provisioned
     * in the Service Fabric cluster. These results are of application types whose name match exactly the one specified
     * as the parameter, and which comply with the given query parameters. All versions of the application type matching
     * the application type name are returned, with each version returned as one application type. The response includes
     * the name, version, status, and other details about the application type. This is a paged query, meaning that if
     * not all of the application types fit in a page, one page of results is returned as well as a continuation token,
     * which can be used to get the next page. For example, if there are 10 application types but a page only fits the
     * first three application types, or if max results is set to 3, then three is returned. To access the rest of the
     * results, retrieve subsequent pages by using the returned continuation token in the next query. An empty
     * continuation token is returned if there are no subsequent pages.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of application types that are provisioned or being provisioned in the cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedApplicationTypeInfoList> getApplicationTypeInfoListByNameAsync(
            String applicationTypeName,
            String applicationTypeVersion,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        return getApplicationTypeInfoListByNameWithResponseAsync(
                        applicationTypeName,
                        applicationTypeVersion,
                        excludeApplicationParameters,
                        continuationToken,
                        maxResults,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new
     * applications can be instantiated. The provision operation can be performed either on the application package
     * specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     *
     * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type
     *     description which supports either image store-based provision or external store-based provision.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> provisionApplicationTypeWithResponseAsync(
            ProvisionApplicationTypeDescriptionBase provisionApplicationTypeDescriptionBaseRequiredBodyParam,
            Long timeout) {
        final String accept = "application/json";
        return service.provisionApplicationType(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                provisionApplicationTypeDescriptionBaseRequiredBodyParam,
                accept);
    }

    /**
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new
     * applications can be instantiated. The provision operation can be performed either on the application package
     * specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     *
     * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type
     *     description which supports either image store-based provision or external store-based provision.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> provisionApplicationTypeAsync(
            ProvisionApplicationTypeDescriptionBase provisionApplicationTypeDescriptionBaseRequiredBodyParam,
            Long timeout) {
        return provisionApplicationTypeWithResponseAsync(
                        provisionApplicationTypeDescriptionBaseRequiredBodyParam, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This operation can only be performed if all application instances of the application type have been deleted. Once
     * the application type is unregistered, no new application instances can be created for this particular application
     * type.
     *
     * @param applicationTypeName The name of the application type.
     * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store
     *     specified during the prior copy operation.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unprovisionApplicationTypeWithResponseAsync(
            String applicationTypeName,
            UnprovisionApplicationTypeDescriptionInfo unprovisionApplicationTypeDescriptionInfo,
            Long timeout) {
        final String accept = "application/json";
        return service.unprovisionApplicationType(
                this.getHost(),
                this.getApiVersion(),
                applicationTypeName,
                timeout,
                unprovisionApplicationTypeDescriptionInfo,
                accept);
    }

    /**
     * This operation can only be performed if all application instances of the application type have been deleted. Once
     * the application type is unregistered, no new application instances can be created for this particular application
     * type.
     *
     * @param applicationTypeName The name of the application type.
     * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store
     *     specified during the prior copy operation.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unprovisionApplicationTypeAsync(
            String applicationTypeName,
            UnprovisionApplicationTypeDescriptionInfo unprovisionApplicationTypeDescriptionInfo,
            Long timeout) {
        return unprovisionApplicationTypeWithResponseAsync(
                        applicationTypeName, unprovisionApplicationTypeDescriptionInfo, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type
     * in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about service types that are supported by a provisioned application
     *     type in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ServiceTypeInfo>>> getServiceTypeInfoListWithResponseAsync(
            String applicationTypeName, String applicationTypeVersion, Long timeout) {
        final String accept = "application/json";
        return service.getServiceTypeInfoList(
                this.getHost(), this.getApiVersion(), applicationTypeName, applicationTypeVersion, timeout, accept);
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type
     * in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about service types that are supported by a provisioned application
     *     type in a Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ServiceTypeInfo>> getServiceTypeInfoListAsync(
            String applicationTypeName, String applicationTypeVersion, Long timeout) {
        return getServiceTypeInfoListWithResponseAsync(applicationTypeName, applicationTypeVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a
     * Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204
     * response is returned if the specified service type is not found in the cluster.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about a specific service type that is supported by a provisioned application type in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceTypeInfo>> getServiceTypeInfoByNameWithResponseAsync(
            String applicationTypeName, String applicationTypeVersion, String serviceTypeName, Long timeout) {
        final String accept = "application/json";
        return service.getServiceTypeInfoByName(
                this.getHost(),
                this.getApiVersion(),
                applicationTypeName,
                applicationTypeVersion,
                serviceTypeName,
                timeout,
                accept);
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a
     * Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204
     * response is returned if the specified service type is not found in the cluster.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about a specific service type that is supported by a provisioned application type in a
     *     Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceTypeInfo> getServiceTypeInfoByNameAsync(
            String applicationTypeName, String applicationTypeVersion, String serviceTypeName, Long timeout) {
        return getServiceTypeInfoByNameWithResponseAsync(
                        applicationTypeName, applicationTypeVersion, serviceTypeName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest describing a service type along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceTypeManifest>> getServiceManifestWithResponseAsync(
            String applicationTypeName, String applicationTypeVersion, String serviceManifestName, Long timeout) {
        final String accept = "application/json";
        return service.getServiceManifest(
                this.getHost(),
                this.getApiVersion(),
                applicationTypeName,
                applicationTypeVersion,
                serviceManifestName,
                timeout,
                accept);
    }

    /**
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the manifest describing a service type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceTypeManifest> getServiceManifestAsync(
            String applicationTypeName, String applicationTypeVersion, String serviceManifestName, Long timeout) {
        return getServiceManifestWithResponseAsync(
                        applicationTypeName, applicationTypeVersion, serviceManifestName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a
     * Service Fabric cluster. The response includes the name of the service type, its registration status, the code
     * package that registered it and activation ID of the service package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of the service manifest to filter the list of deployed service type
     *     information. If specified, the response will only contain the information about service types that are
     *     defined in this service manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about service types from the applications deployed on a node in a
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedServiceTypeInfo>>> getDeployedServiceTypeInfoListWithResponseAsync(
            String nodeName, String applicationId, String serviceManifestName, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServiceTypeInfoList(
                this.getHost(), this.getApiVersion(), nodeName, applicationId, serviceManifestName, timeout, accept);
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a
     * Service Fabric cluster. The response includes the name of the service type, its registration status, the code
     * package that registered it and activation ID of the service package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of the service manifest to filter the list of deployed service type
     *     information. If specified, the response will only contain the information about service types that are
     *     defined in this service manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about service types from the applications deployed on a node in a
     *     Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedServiceTypeInfo>> getDeployedServiceTypeInfoListAsync(
            String nodeName, String applicationId, String serviceManifestName, Long timeout) {
        return getDeployedServiceTypeInfoListWithResponseAsync(nodeName, applicationId, serviceManifestName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list containing the information about a specific service type from the applications deployed on a node
     * in a Service Fabric cluster. The response includes the name of the service type, its registration status, the
     * code package that registered it and activation ID of the service package. Each entry represents one activation of
     * a service type, differentiated by the activation ID.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param serviceManifestName The name of the service manifest to filter the list of deployed service type
     *     information. If specified, the response will only contain the information about service types that are
     *     defined in this service manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about a specific service type from the applications deployed on a
     *     node in a Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedServiceTypeInfo>>> getDeployedServiceTypeInfoByNameWithResponseAsync(
            String nodeName, String applicationId, String serviceTypeName, String serviceManifestName, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServiceTypeInfoByName(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                serviceTypeName,
                serviceManifestName,
                timeout,
                accept);
    }

    /**
     * Gets the list containing the information about a specific service type from the applications deployed on a node
     * in a Service Fabric cluster. The response includes the name of the service type, its registration status, the
     * code package that registered it and activation ID of the service package. Each entry represents one activation of
     * a service type, differentiated by the activation ID.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName Specifies the name of a Service Fabric service type.
     * @param serviceManifestName The name of the service manifest to filter the list of deployed service type
     *     information. If specified, the response will only contain the information about service types that are
     *     defined in this service manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about a specific service type from the applications deployed on a
     *     node in a Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedServiceTypeInfo>> getDeployedServiceTypeInfoByNameAsync(
            String nodeName, String applicationId, String serviceTypeName, String serviceManifestName, Long timeout) {
        return getDeployedServiceTypeInfoByNameWithResponseAsync(
                        nodeName, applicationId, serviceTypeName, serviceManifestName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates a Service Fabric application using the specified description.
     *
     * @param applicationDescription Description for creating an application.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createApplicationWithResponseAsync(
            ApplicationDescription applicationDescription, Long timeout) {
        final String accept = "application/json";
        return service.createApplication(this.getHost(), this.getApiVersion(), timeout, applicationDescription, accept);
    }

    /**
     * Creates a Service Fabric application using the specified description.
     *
     * @param applicationDescription Description for creating an application.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createApplicationAsync(ApplicationDescription applicationDescription, Long timeout) {
        return createApplicationWithResponseAsync(applicationDescription, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * An application must be created before it can be deleted. Deleting an application will delete all services that
     * are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner
     * and then delete the service. However, if a service is having issues closing the replica gracefully, the delete
     * operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close
     * sequence and forcefully delete the application and all of its services.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteApplicationWithResponseAsync(
            String applicationId, Boolean forceRemove, Long timeout) {
        final String accept = "application/json";
        return service.deleteApplication(
                this.getHost(), this.getApiVersion(), applicationId, forceRemove, timeout, accept);
    }

    /**
     * An application must be created before it can be deleted. Deleting an application will delete all services that
     * are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner
     * and then delete the service. However, if a service is having issues closing the replica gracefully, the delete
     * operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close
     * sequence and forcefully delete the application and all of its services.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteApplicationAsync(String applicationId, Boolean forceRemove, Long timeout) {
        return deleteApplicationWithResponseAsync(applicationId, forceRemove, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the load information about the application that was created or in the process of being created in the
     * Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
     * minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
     * metric information about the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load Information about a Service Fabric application along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationLoadInfo>> getApplicationLoadInfoWithResponseAsync(
            String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationLoadInfo(this.getHost(), this.getApiVersion(), applicationId, timeout, accept);
    }

    /**
     * Returns the load information about the application that was created or in the process of being created in the
     * Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name,
     * minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load
     * metric information about the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return load Information about a Service Fabric application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationLoadInfo> getApplicationLoadInfoAsync(String applicationId, Long timeout) {
        return getApplicationLoadInfoWithResponseAsync(applicationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about the applications that were created or in the process of being created in the Service
     * Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and
     * other details about the application. If the applications do not fit in a page, one page of results is returned as
     * well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
     * ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * @param applicationDefinitionKindFilter Used to filter on ApplicationDefinitionKind, which is the mechanism used
     *     to define a Service Fabric application. - Default - Default value, which performs the same function as
     *     selecting "All". The value is 0. - All - Filter that matches input with any ApplicationDefinitionKind value.
     *     The value is 65535. - ServiceFabricApplicationDescription - Filter that matches input with
     *     ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1. - Compose - Filter that
     *     matches input with ApplicationDefinitionKind value Compose. The value is 2.
     * @param applicationTypeName The application type name used to filter the applications to query for. This value
     *     should not contain the application type version.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the applications that were created or in the process of being created in the
     *     Service Fabric cluster and match the specified filters along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedApplicationInfoList>> getApplicationInfoListWithResponseAsync(
            Integer applicationDefinitionKindFilter,
            String applicationTypeName,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        final String accept = "application/json";
        return service.getApplicationInfoList(
                this.getHost(),
                this.getApiVersion(),
                applicationDefinitionKindFilter,
                applicationTypeName,
                excludeApplicationParameters,
                continuationToken,
                maxResults,
                timeout,
                accept);
    }

    /**
     * Gets the information about the applications that were created or in the process of being created in the Service
     * Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and
     * other details about the application. If the applications do not fit in a page, one page of results is returned as
     * well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and
     * ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * @param applicationDefinitionKindFilter Used to filter on ApplicationDefinitionKind, which is the mechanism used
     *     to define a Service Fabric application. - Default - Default value, which performs the same function as
     *     selecting "All". The value is 0. - All - Filter that matches input with any ApplicationDefinitionKind value.
     *     The value is 65535. - ServiceFabricApplicationDescription - Filter that matches input with
     *     ApplicationDefinitionKind value ServiceFabricApplicationDescription. The value is 1. - Compose - Filter that
     *     matches input with ApplicationDefinitionKind value Compose. The value is 2.
     * @param applicationTypeName The application type name used to filter the applications to query for. This value
     *     should not contain the application type version.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the applications that were created or in the process of being created in the
     *     Service Fabric cluster and match the specified filters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedApplicationInfoList> getApplicationInfoListAsync(
            Integer applicationDefinitionKindFilter,
            String applicationTypeName,
            Boolean excludeApplicationParameters,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        return getApplicationInfoListWithResponseAsync(
                        applicationDefinitionKindFilter,
                        applicationTypeName,
                        excludeApplicationParameters,
                        continuationToken,
                        maxResults,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the application that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
     * status, parameters, and other details about the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric application along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationInfo>> getApplicationInfoWithResponseAsync(
            String applicationId, Boolean excludeApplicationParameters, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationInfo(
                this.getHost(), this.getApiVersion(), applicationId, excludeApplicationParameters, timeout, accept);
    }

    /**
     * Returns the information about the application that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type,
     * status, parameters, and other details about the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from
     *     the result.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationInfo> getApplicationInfoAsync(
            String applicationId, Boolean excludeApplicationParameters, Long timeout) {
        return getApplicationInfoWithResponseAsync(applicationId, excludeApplicationParameters, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning
     * health state. If the entity is not found in the health store, it will return Error.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedApplicationsHealthStateFilter Allows filtering of the deployed applications health state objects
     *     returned in the result of application health query based on their health state. The possible values for this
     *     parameter include integer value of one of the following health states. Only deployed applications that match
     *     the filter will be returned. All deployed applications are used to evaluate the aggregated health state. If
     *     not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
     *     combination of these values, obtained using bitwise 'OR' operator. For example, if the provided value is 6
     *     then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param servicesHealthStateFilter Allows filtering of the services health state objects returned in the result of
     *     services health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only services that match the filter are returned. All services
     *     are used to evaluate the aggregated health state. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value could be a combination of these values, obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState
     *     value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationHealth>> getApplicationHealthWithResponseAsync(
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedApplicationsHealthStateFilter,
            Integer servicesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        final String accept = "application/json";
        return service.getApplicationHealth(
                this.getHost(),
                applicationId,
                this.getApiVersion(),
                eventsHealthStateFilter,
                deployedApplicationsHealthStateFilter,
                servicesHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                accept);
    }

    /**
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning
     * health state. If the entity is not found in the health store, it will return Error.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedApplicationsHealthStateFilter Allows filtering of the deployed applications health state objects
     *     returned in the result of application health query based on their health state. The possible values for this
     *     parameter include integer value of one of the following health states. Only deployed applications that match
     *     the filter will be returned. All deployed applications are used to evaluate the aggregated health state. If
     *     not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
     *     combination of these values, obtained using bitwise 'OR' operator. For example, if the provided value is 6
     *     then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param servicesHealthStateFilter Allows filtering of the services health state objects returned in the result of
     *     services health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only services that match the filter are returned. All services
     *     are used to evaluate the aggregated health state. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value could be a combination of these values, obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState
     *     value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the health of the application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationHealth> getApplicationHealthAsync(
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedApplicationsHealthStateFilter,
            Integer servicesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        return getApplicationHealthWithResponseAsync(
                        applicationId,
                        eventsHealthStateFilter,
                        deployedApplicationsHealthStateFilter,
                        servicesHealthStateFilter,
                        excludeHealthStatistics,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
     * used to evaluate the health.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedApplicationsHealthStateFilter Allows filtering of the deployed applications health state objects
     *     returned in the result of application health query based on their health state. The possible values for this
     *     parameter include integer value of one of the following health states. Only deployed applications that match
     *     the filter will be returned. All deployed applications are used to evaluate the aggregated health state. If
     *     not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
     *     combination of these values, obtained using bitwise 'OR' operator. For example, if the provided value is 6
     *     then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param servicesHealthStateFilter Allows filtering of the services health state objects returned in the result of
     *     services health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only services that match the filter are returned. All services
     *     are used to evaluate the aggregated health state. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value could be a combination of these values, obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState
     *     value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric application along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationHealth>> getApplicationHealthUsingPolicyWithResponseAsync(
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedApplicationsHealthStateFilter,
            Integer servicesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getApplicationHealthUsingPolicy(
                this.getHost(),
                applicationId,
                this.getApiVersion(),
                eventsHealthStateFilter,
                deployedApplicationsHealthStateFilter,
                servicesHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies
     * used to evaluate the health.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedApplicationsHealthStateFilter Allows filtering of the deployed applications health state objects
     *     returned in the result of application health query based on their health state. The possible values for this
     *     parameter include integer value of one of the following health states. Only deployed applications that match
     *     the filter will be returned. All deployed applications are used to evaluate the aggregated health state. If
     *     not specified, all entries are returned. The state values are flag-based enumeration, so the value could be a
     *     combination of these values, obtained using bitwise 'OR' operator. For example, if the provided value is 6
     *     then health state of deployed applications with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param servicesHealthStateFilter Allows filtering of the services health state objects returned in the result of
     *     services health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only services that match the filter are returned. All services
     *     are used to evaluate the aggregated health state. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value could be a combination of these values, obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of services with HealthState
     *     value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationHealth> getApplicationHealthUsingPolicyAsync(
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedApplicationsHealthStateFilter,
            Integer servicesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getApplicationHealthUsingPolicyWithResponseAsync(
                        applicationId,
                        eventsHealthStateFilter,
                        deployedApplicationsHealthStateFilter,
                        servicesHealthStateFilter,
                        excludeHealthStatistics,
                        timeout,
                        applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the specified Service Fabric application. The report must contain the information about
     * the source of the health report and property on which it is reported. The report is sent to a Service Fabric
     * gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected
     * by the health store after extra validation. For example, the health store may reject the report because of an
     * invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get
     * application health and check that the report appears in the HealthEvents section.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportApplicationHealthWithResponseAsync(
            String applicationId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        final String accept = "application/json";
        return service.reportApplicationHealth(
                this.getHost(), this.getApiVersion(), applicationId, immediate, timeout, healthInformation, accept);
    }

    /**
     * Reports health state of the specified Service Fabric application. The report must contain the information about
     * the source of the health report and property on which it is reported. The report is sent to a Service Fabric
     * gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected
     * by the health store after extra validation. For example, the health store may reject the report because of an
     * invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get
     * application health and check that the report appears in the HealthEvents section.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportApplicationHealthAsync(
            String applicationId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        return reportApplicationHealthWithResponseAsync(applicationId, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
     * valid. Note,
     * [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
     * are not preserved across an application upgrade. In order to preserve current application parameters, the user
     * should get the parameters using [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into
     * the upgrade API call as shown in the example.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeDescription Parameters for an application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startApplicationUpgradeWithResponseAsync(
            String applicationId, ApplicationUpgradeDescription applicationUpgradeDescription, Long timeout) {
        final String accept = "application/json";
        return service.startApplicationUpgrade(
                this.getHost(), this.getApiVersion(), applicationId, timeout, applicationUpgradeDescription, accept);
    }

    /**
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are
     * valid. Note,
     * [ApplicationParameter](https://docs.microsoft.com/dotnet/api/system.fabric.description.applicationdescription.applicationparameters)s
     * are not preserved across an application upgrade. In order to preserve current application parameters, the user
     * should get the parameters using [GetApplicationInfo](./GetApplicationInfo.md) operation first and pass them into
     * the upgrade API call as shown in the example.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeDescription Parameters for an application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startApplicationUpgradeAsync(
            String applicationId, ApplicationUpgradeDescription applicationUpgradeDescription, Long timeout) {
        return startApplicationUpgradeWithResponseAsync(applicationId, applicationUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns information about the state of the latest application upgrade along with details to aid debugging
     * application health issues.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the parameters for an application upgrade along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationUpgradeProgressInfo>> getApplicationUpgradeWithResponseAsync(
            String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationUpgrade(this.getHost(), this.getApiVersion(), applicationId, timeout, accept);
    }

    /**
     * Returns information about the state of the latest application upgrade along with details to aid debugging
     * application health issues.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the parameters for an application upgrade on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationUpgradeProgressInfo> getApplicationUpgradeAsync(String applicationId, Long timeout) {
        return getApplicationUpgradeWithResponseAsync(applicationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
     * application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
     * issues in the application to make progress.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeUpdateDescription Parameters for updating an existing application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationUpgradeWithResponseAsync(
            String applicationId,
            ApplicationUpgradeUpdateDescription applicationUpgradeUpdateDescription,
            Long timeout) {
        final String accept = "application/json";
        return service.updateApplicationUpgrade(
                this.getHost(),
                this.getApiVersion(),
                applicationId,
                timeout,
                applicationUpgradeUpdateDescription,
                accept);
    }

    /**
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the
     * application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or
     * issues in the application to make progress.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpgradeUpdateDescription Parameters for updating an existing application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateApplicationUpgradeAsync(
            String applicationId,
            ApplicationUpgradeUpdateDescription applicationUpgradeUpdateDescription,
            Long timeout) {
        return updateApplicationUpgradeWithResponseAsync(applicationId, applicationUpgradeUpdateDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Updates a Service Fabric application instance. The set of properties that can be updated are a subset of the
     * properties that were specified at the time of creating the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpdateDescription Parameters for updating an existing application instance.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateApplicationWithResponseAsync(
            String applicationId, ApplicationUpdateDescription applicationUpdateDescription, Long timeout) {
        final String accept = "application/json";
        return service.updateApplication(
                this.getHost(), this.getApiVersion(), applicationId, timeout, applicationUpdateDescription, accept);
    }

    /**
     * Updates a Service Fabric application instance. The set of properties that can be updated are a subset of the
     * properties that were specified at the time of creating the application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param applicationUpdateDescription Parameters for updating an existing application instance.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateApplicationAsync(
            String applicationId, ApplicationUpdateDescription applicationUpdateDescription, Long timeout) {
        return updateApplicationWithResponseAsync(applicationId, applicationUpdateDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
     * time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
     * this API before proceeding to the next upgrade domain.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationUpgradeWithResponseAsync(
            String applicationId,
            ResumeApplicationUpgradeDescription resumeApplicationUpgradeDescription,
            Long timeout) {
        final String accept = "application/json";
        return service.resumeApplicationUpgrade(
                this.getHost(),
                this.getApiVersion(),
                applicationId,
                timeout,
                resumeApplicationUpgradeDescription,
                accept);
    }

    /**
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a
     * time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call
     * this API before proceeding to the next upgrade domain.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application upgrade.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeApplicationUpgradeAsync(
            String applicationId,
            ResumeApplicationUpgradeDescription resumeApplicationUpgradeDescription,
            Long timeout) {
        return resumeApplicationUpgradeWithResponseAsync(applicationId, resumeApplicationUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll
     * back the current in-progress upgrade that is rolling forward to new version. If the application is not currently
     * being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a
     * previous version.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rollbackApplicationUpgradeWithResponseAsync(String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.rollbackApplicationUpgrade(this.getHost(), this.getApiVersion(), applicationId, timeout, accept);
    }

    /**
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll
     * back the current in-progress upgrade that is rolling forward to new version. If the application is not currently
     * being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a
     * previous version.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rollbackApplicationUpgradeAsync(String applicationId, Long timeout) {
        return rollbackApplicationUpgradeWithResponseAsync(applicationId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about
     * deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
     * active, activating, and downloading states. This query requires that the node name corresponds to a node on the
     * cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
     * cluster.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param includeHealthState Include the health state of an entity. If this parameter is false or not specified,
     *     then the health state returned is "Unknown". When set to true, the query goes in parallel to the node and the
     *     health system service before the results are merged. As a result, the query is more expensive and may take a
     *     longer time.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of applications deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedDeployedApplicationInfoList>> getDeployedApplicationInfoListWithResponseAsync(
            String nodeName, Long timeout, Boolean includeHealthState, String continuationToken, Long maxResults) {
        final String accept = "application/json";
        return service.getDeployedApplicationInfoList(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                timeout,
                includeHealthState,
                continuationToken,
                maxResults,
                accept);
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about
     * deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in
     * active, activating, and downloading states. This query requires that the node name corresponds to a node on the
     * cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the
     * cluster.
     *
     * @param nodeName The name of the node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param includeHealthState Include the health state of an entity. If this parameter is false or not specified,
     *     then the health state returned is "Unknown". When set to true, the query goes in parallel to the node and the
     *     health system service before the results are merged. As a result, the query is more expensive and may take a
     *     longer time.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of applications deployed on a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedDeployedApplicationInfoList> getDeployedApplicationInfoListAsync(
            String nodeName, Long timeout, Boolean includeHealthState, String continuationToken, Long maxResults) {
        return getDeployedApplicationInfoListWithResponseAsync(
                        nodeName, timeout, includeHealthState, continuationToken, maxResults)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This query returns system application information if the application ID provided is for system application.
     * Results encompass deployed applications in active, activating, and downloading states. This query requires that
     * the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to
     * any active Service Fabric nodes on the cluster.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param includeHealthState Include the health state of an entity. If this parameter is false or not specified,
     *     then the health state returned is "Unknown". When set to true, the query goes in parallel to the node and the
     *     health system service before the results are merged. As a result, the query is more expensive and may take a
     *     longer time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about application deployed on the node along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedApplicationInfo>> getDeployedApplicationInfoWithResponseAsync(
            String nodeName, String applicationId, Long timeout, Boolean includeHealthState) {
        final String accept = "application/json";
        return service.getDeployedApplicationInfo(
                this.getHost(), this.getApiVersion(), nodeName, applicationId, timeout, includeHealthState, accept);
    }

    /**
     * This query returns system application information if the application ID provided is for system application.
     * Results encompass deployed applications in active, activating, and downloading states. This query requires that
     * the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to
     * any active Service Fabric nodes on the cluster.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param includeHealthState Include the health state of an entity. If this parameter is false or not specified,
     *     then the health state returned is "Unknown". When set to true, the query goes in parallel to the node and the
     *     health system service before the results are merged. As a result, the query is more expensive and may take a
     *     longer time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about application deployed on the node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedApplicationInfo> getDeployedApplicationInfoAsync(
            String nodeName, String applicationId, Long timeout, Boolean includeHealthState) {
        return getDeployedApplicationInfoWithResponseAsync(nodeName, applicationId, timeout, includeHealthState)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. Use
     * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
     * application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedServicePackagesHealthStateFilter Allows filtering of the deployed service package health state
     *     objects returned in the result of deployed application health query based on their health state. The possible
     *     values for this parameter include integer value of one of the following health states. Only deployed service
     *     packages that match the filter are returned. All deployed service packages are used to evaluate the
     *     aggregated health state of the deployed application. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value can be a combination of these values, obtained using the
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of service packages with
     *     HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of an application deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedApplicationHealth>> getDeployedApplicationHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedServicePackagesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        final String accept = "application/json";
        return service.getDeployedApplicationHealth(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                eventsHealthStateFilter,
                deployedServicePackagesHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                accept);
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. Use
     * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed
     * application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedServicePackagesHealthStateFilter Allows filtering of the deployed service package health state
     *     objects returned in the result of deployed application health query based on their health state. The possible
     *     values for this parameter include integer value of one of the following health states. Only deployed service
     *     packages that match the filter are returned. All deployed service packages are used to evaluate the
     *     aggregated health state of the deployed application. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value can be a combination of these values, obtained using the
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of service packages with
     *     HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of an application deployed on a Service Fabric node on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedApplicationHealth> getDeployedApplicationHealthAsync(
            String nodeName,
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedServicePackagesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        return getDeployedApplicationHealthWithResponseAsync(
                        nodeName,
                        applicationId,
                        eventsHealthStateFilter,
                        deployedServicePackagesHealthStateFilter,
                        excludeHealthStatistics,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
     * Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override
     * the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
     * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
     * application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedServicePackagesHealthStateFilter Allows filtering of the deployed service package health state
     *     objects returned in the result of deployed application health query based on their health state. The possible
     *     values for this parameter include integer value of one of the following health states. Only deployed service
     *     packages that match the filter are returned. All deployed service packages are used to evaluate the
     *     aggregated health state of the deployed application. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value can be a combination of these values, obtained using the
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of service packages with
     *     HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of an application deployed on a Service Fabric node using the specified
     *     policy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedApplicationHealth>> getDeployedApplicationHealthUsingPolicyWithResponseAsync(
            String nodeName,
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedServicePackagesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getDeployedApplicationHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                eventsHealthStateFilter,
                deployedServicePackagesHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy.
     * Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for
     * DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override
     * the health policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
     * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed
     * application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param deployedServicePackagesHealthStateFilter Allows filtering of the deployed service package health state
     *     objects returned in the result of deployed application health query based on their health state. The possible
     *     values for this parameter include integer value of one of the following health states. Only deployed service
     *     packages that match the filter are returned. All deployed service packages are used to evaluate the
     *     aggregated health state of the deployed application. If not specified, all entries are returned. The state
     *     values are flag-based enumeration, so the value can be a combination of these values, obtained using the
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of service packages with
     *     HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of an application deployed on a Service Fabric node using the specified
     *     policy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedApplicationHealth> getDeployedApplicationHealthUsingPolicyAsync(
            String nodeName,
            String applicationId,
            Integer eventsHealthStateFilter,
            Integer deployedServicePackagesHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getDeployedApplicationHealthUsingPolicyWithResponseAsync(
                        nodeName,
                        applicationId,
                        eventsHealthStateFilter,
                        deployedServicePackagesHealthStateFilter,
                        excludeHealthStatistics,
                        timeout,
                        applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the
     * information about the source of the health report and property on which it is reported. The report is sent to a
     * Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway,
     * but rejected by the health store after extra validation. For example, the health store may reject the report
     * because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the
     * health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedApplicationHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        final String accept = "application/json";
        return service.reportDeployedApplicationHealth(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                immediate,
                timeout,
                healthInformation,
                accept);
    }

    /**
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the
     * information about the source of the health report and property on which it is reported. The report is sent to a
     * Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway,
     * but rejected by the health store after extra validation. For example, the health store may reject the report
     * because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the
     * health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportDeployedApplicationHealthAsync(
            String nodeName,
            String applicationId,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        return reportDeployedApplicationHealthWithResponseAsync(
                        nodeName, applicationId, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * The response contains the application manifest XML as a string.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the manifest describing an application type registered in a Service Fabric cluster along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationTypeManifest>> getApplicationManifestWithResponseAsync(
            String applicationTypeName, String applicationTypeVersion, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationManifest(
                this.getHost(), this.getApiVersion(), applicationTypeName, applicationTypeVersion, timeout, accept);
    }

    /**
     * The response contains the application manifest XML as a string.
     *
     * @param applicationTypeName The name of the application type.
     * @param applicationTypeVersion The version of the application type.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the manifest describing an application type registered in a Service Fabric cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationTypeManifest> getApplicationManifestAsync(
            String applicationTypeName, String applicationTypeVersion, Long timeout) {
        return getApplicationManifestWithResponseAsync(applicationTypeName, applicationTypeVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about all services belonging to the application specified by the application ID.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName The service type name used to filter the services to query for.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of services in the cluster for an application along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedServiceInfoList>> getServiceInfoListWithResponseAsync(
            String applicationId, String serviceTypeName, String continuationToken, Long timeout) {
        final String accept = "application/json";
        return service.getServiceInfoList(
                this.getHost(),
                applicationId,
                serviceTypeName,
                this.getApiVersion(),
                continuationToken,
                timeout,
                accept);
    }

    /**
     * Returns the information about all services belonging to the application specified by the application ID.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceTypeName The service type name used to filter the services to query for.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of services in the cluster for an application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedServiceInfoList> getServiceInfoListAsync(
            String applicationId, String serviceTypeName, String continuationToken, Long timeout) {
        return getServiceInfoListWithResponseAsync(applicationId, serviceTypeName, continuationToken, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric service along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceInfo>> getServiceInfoWithResponseAsync(
            String applicationId, String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.getServiceInfo(this.getHost(), applicationId, serviceId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceInfo> getServiceInfoAsync(String applicationId, String serviceId, Long timeout) {
        return getServiceInfoWithResponseAsync(applicationId, serviceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is
     * returned if a service with the provided service ID does not exist.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the name of the application for the specified service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ApplicationNameInfo>> getApplicationNameInfoWithResponseAsync(String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationNameInfo(this.getHost(), this.getApiVersion(), serviceId, timeout, accept);
    }

    /**
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is
     * returned if a service with the provided service ID does not exist.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the name of the application for the specified service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationNameInfo> getApplicationNameInfoAsync(String serviceId, Long timeout) {
        return getApplicationNameInfoWithResponseAsync(serviceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
     * application. The description for creating the service includes partitioning information and optional properties
     * for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceDescription The information necessary to create a service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceWithResponseAsync(
            String applicationId, ServiceDescription serviceDescription, Long timeout) {
        final String accept = "application/json";
        return service.createService(
                this.getHost(), this.getApiVersion(), applicationId, timeout, serviceDescription, accept);
    }

    /**
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric
     * application. The description for creating the service includes partitioning information and optional properties
     * for placement and load balancing. Some of the properties can later be modified using `UpdateService` API.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceDescription The information necessary to create a service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createServiceAsync(String applicationId, ServiceDescription serviceDescription, Long timeout) {
        return createServiceWithResponseAsync(applicationId, serviceDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Creates a Service Fabric service from the service template defined in the application manifest. A service
     * template contains the properties that will be same for the service instance of the same type. The API allows
     * overriding the properties that are usually different for different services of the same service type.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceFromTemplateDescription Describes the service that needs to be created from the template defined in
     *     the application manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createServiceFromTemplateWithResponseAsync(
            String applicationId, ServiceFromTemplateDescription serviceFromTemplateDescription, Long timeout) {
        final String accept = "application/json";
        return service.createServiceFromTemplate(
                this.getHost(), this.getApiVersion(), applicationId, timeout, serviceFromTemplateDescription, accept);
    }

    /**
     * Creates a Service Fabric service from the service template defined in the application manifest. A service
     * template contains the properties that will be same for the service instance of the same type. The API allows
     * overriding the properties that are usually different for different services of the same service type.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceFromTemplateDescription Describes the service that needs to be created from the template defined in
     *     the application manifest.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createServiceFromTemplateAsync(
            String applicationId, ServiceFromTemplateDescription serviceFromTemplateDescription, Long timeout) {
        return createServiceFromTemplateWithResponseAsync(applicationId, serviceFromTemplateDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
     * in a graceful manner and then delete the service. However, if the service is having issues closing the replica
     * gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
     * graceful close sequence and forcefully delete the service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteServiceWithResponseAsync(String serviceId, Boolean forceRemove, Long timeout) {
        final String accept = "application/json";
        return service.deleteService(this.getHost(), this.getApiVersion(), serviceId, forceRemove, timeout, accept);
    }

    /**
     * A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas
     * in a graceful manner and then delete the service. However, if the service is having issues closing the replica
     * gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the
     * graceful close sequence and forcefully delete the service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteServiceAsync(String serviceId, Boolean forceRemove, Long timeout) {
        return deleteServiceWithResponseAsync(serviceId, forceRemove, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be
     * updated are a subset of the properties that were specified at the time of creating the service. The current set
     * of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
     * service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
     * running background operation that involves moving the application from one version to another, one upgrade domain
     * at a time, whereas update applies the new properties immediately to the service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceUpdateDescription The information necessary to update a service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateServiceWithResponseAsync(
            String serviceId, ServiceUpdateDescription serviceUpdateDescription, Long timeout) {
        final String accept = "application/json";
        return service.updateService(
                this.getHost(), this.getApiVersion(), serviceId, timeout, serviceUpdateDescription, accept);
    }

    /**
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be
     * updated are a subset of the properties that were specified at the time of creating the service. The current set
     * of properties can be obtained using `GetServiceDescription` API. Note that updating the properties of a running
     * service is different than upgrading your application using `StartApplicationUpgrade` API. The upgrade is a long
     * running background operation that involves moving the application from one version to another, one upgrade domain
     * at a time, whereas update applies the new properties immediately to the service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param serviceUpdateDescription The information necessary to update a service.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateServiceAsync(
            String serviceId, ServiceUpdateDescription serviceUpdateDescription, Long timeout) {
        return updateServiceWithResponseAsync(serviceId, serviceUpdateDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the description of an existing Service Fabric service. A service must be created before its description can
     * be obtained.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing Service Fabric service along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceDescription>> getServiceDescriptionWithResponseAsync(String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.getServiceDescription(this.getHost(), this.getApiVersion(), serviceId, timeout, accept);
    }

    /**
     * Gets the description of an existing Service Fabric service. A service must be created before its description can
     * be obtained.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of an existing Service Fabric service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceDescription> getServiceDescriptionAsync(String serviceId, Long timeout) {
        return getServiceDescriptionWithResponseAsync(serviceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     * health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the
     * collection of partitions returned. If you specify a service that does not exist in the health store, this request
     * returns an error.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param partitionsHealthStateFilter Allows filtering of the partitions health state objects returned in the result
     *     of service health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only partitions that match the filter are returned. All
     *     partitions are used to evaluate the aggregated health state. If not specified, all entries are returned. The
     *     state values are flag-based enumeration, so the value could be a combination of these value obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
     *     HealthState value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceHealth>> getServiceHealthWithResponseAsync(
            String serviceId,
            Integer eventsHealthStateFilter,
            Integer partitionsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        final String accept = "application/json";
        return service.getServiceHealth(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                eventsHealthStateFilter,
                partitionsHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                accept);
    }

    /**
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     * health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the
     * collection of partitions returned. If you specify a service that does not exist in the health store, this request
     * returns an error.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param partitionsHealthStateFilter Allows filtering of the partitions health state objects returned in the result
     *     of service health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only partitions that match the filter are returned. All
     *     partitions are used to evaluate the aggregated health state. If not specified, all entries are returned. The
     *     state values are flag-based enumeration, so the value could be a combination of these value obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
     *     HealthState value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified service. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceHealth> getServiceHealthAsync(
            String serviceId,
            Integer eventsHealthStateFilter,
            Integer partitionsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        return getServiceHealthWithResponseAsync(
                        serviceId,
                        eventsHealthStateFilter,
                        partitionsHealthStateFilter,
                        excludeHealthStatistics,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health information of the specified service. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions
     * returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param partitionsHealthStateFilter Allows filtering of the partitions health state objects returned in the result
     *     of service health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only partitions that match the filter are returned. All
     *     partitions are used to evaluate the aggregated health state. If not specified, all entries are returned. The
     *     state values are flag-based enumeration, so the value could be a combination of these value obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
     *     HealthState value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified service. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceHealth>> getServiceHealthUsingPolicyWithResponseAsync(
            String serviceId,
            Integer eventsHealthStateFilter,
            Integer partitionsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getServiceHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                eventsHealthStateFilter,
                partitionsHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the health information of the specified service. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions
     * returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param partitionsHealthStateFilter Allows filtering of the partitions health state objects returned in the result
     *     of service health query based on their health state. The possible values for this parameter include integer
     *     value of one of the following health states. Only partitions that match the filter are returned. All
     *     partitions are used to evaluate the aggregated health state. If not specified, all entries are returned. The
     *     state values are flag-based enumeration, so the value could be a combination of these value obtained using
     *     bitwise 'OR' operator. For example, if the provided value is 6 then health state of partitions with
     *     HealthState value of OK (2) and Warning (4) will be returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified service. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter
     *     the collection of partitions returned. If you specify a service that does not exist in the health store, this
     *     request returns an error on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceHealth> getServiceHealthUsingPolicyAsync(
            String serviceId,
            Integer eventsHealthStateFilter,
            Integer partitionsHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getServiceHealthUsingPolicyWithResponseAsync(
                        serviceId,
                        eventsHealthStateFilter,
                        partitionsHealthStateFilter,
                        excludeHealthStatistics,
                        timeout,
                        applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the specified Service Fabric service. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportServiceHealthWithResponseAsync(
            String serviceId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        final String accept = "application/json";
        return service.reportServiceHealth(
                this.getHost(), this.getApiVersion(), serviceId, immediate, timeout, healthInformation, accept);
    }

    /**
     * Reports health state of the specified Service Fabric service. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportServiceHealthAsync(
            String serviceId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        return reportServiceHealthWithResponseAsync(serviceId, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionKeyType Key type for the partition. This parameter is required if the partition scheme for the
     *     service is Int64Range or Named. The possible values are following. - None (1) - Indicates that the
     *     PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as
     *     Singleton. This is the default value. The value is 1. - Int64Range (2) - Indicates that the PartitionKeyValue
     *     parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range.
     *     The value is 2. - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This
     *     is valid for the partitions with partitioning scheme as Named. The value is 3.
     * @param partitionKeyValue Partition key. This is required if the partition scheme for the service is Int64Range or
     *     Named. This is not the partition ID, but rather, either the integer key value, or the name of the partition
     *     ID. For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would
     *     be an integer in that range. Query service description to see the range or name.
     * @param previousRspVersion The value in the Version field of the response that was received previously. This is
     *     required if the user knows that the result that was gotten previously is stale.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a service partition and its associated endpoints along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ResolvedServicePartition>> resolveServiceWithResponseAsync(
            String serviceId,
            Integer partitionKeyType,
            String partitionKeyValue,
            String previousRspVersion,
            Long timeout) {
        final String accept = "application/json";
        return service.resolveService(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionKeyType,
                partitionKeyValue,
                previousRspVersion,
                timeout,
                accept);
    }

    /**
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionKeyType Key type for the partition. This parameter is required if the partition scheme for the
     *     service is Int64Range or Named. The possible values are following. - None (1) - Indicates that the
     *     PartitionKeyValue parameter is not specified. This is valid for the partitions with partitioning scheme as
     *     Singleton. This is the default value. The value is 1. - Int64Range (2) - Indicates that the PartitionKeyValue
     *     parameter is an int64 partition key. This is valid for the partitions with partitioning scheme as Int64Range.
     *     The value is 2. - Named (3) - Indicates that the PartitionKeyValue parameter is a name of the partition. This
     *     is valid for the partitions with partitioning scheme as Named. The value is 3.
     * @param partitionKeyValue Partition key. This is required if the partition scheme for the service is Int64Range or
     *     Named. This is not the partition ID, but rather, either the integer key value, or the name of the partition
     *     ID. For example, if your service is using ranged partitions from 0 to 10, then they PartitionKeyValue would
     *     be an integer in that range. Query service description to see the range or name.
     * @param previousRspVersion The value in the Version field of the response that was received previously. This is
     *     required if the user knows that the result that was gotten previously is stale.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a service partition and its associated endpoints on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResolvedServicePartition> resolveServiceAsync(
            String serviceId,
            Integer partitionKeyType,
            String partitionKeyValue,
            String previousRspVersion,
            Long timeout) {
        return resolveServiceWithResponseAsync(
                        serviceId, partitionKeyType, partitionKeyValue, previousRspVersion, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the unplaced replicas of the service. If PartitionId is specified, then result will
     * contain information only about unplaced replicas for that partition. If PartitionId is not specified, then result
     * will contain information about unplaced replicas for all partitions of that service. If OnlyQueryPrimaries is set
     * to true, then result will contain information only about primary replicas, and will ignore unplaced secondary
     * replicas.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param onlyQueryPrimaries Indicates that unplaced replica information will be queries only for primary replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains information for an unplaced replica along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UnplacedReplicaInformation>> getUnplacedReplicaInformationWithResponseAsync(
            String serviceId, UUID partitionId, Boolean onlyQueryPrimaries, Long timeout) {
        final String accept = "application/json";
        return service.getUnplacedReplicaInformation(
                this.getHost(), this.getApiVersion(), serviceId, partitionId, onlyQueryPrimaries, timeout, accept);
    }

    /**
     * Returns the information about the unplaced replicas of the service. If PartitionId is specified, then result will
     * contain information only about unplaced replicas for that partition. If PartitionId is not specified, then result
     * will contain information about unplaced replicas for all partitions of that service. If OnlyQueryPrimaries is set
     * to true, then result will contain information only about primary replicas, and will ignore unplaced secondary
     * replicas.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param onlyQueryPrimaries Indicates that unplaced replica information will be queries only for primary replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains information for an unplaced replica on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UnplacedReplicaInformation> getUnplacedReplicaInformationAsync(
            String serviceId, UUID partitionId, Boolean onlyQueryPrimaries, Long timeout) {
        return getUnplacedReplicaInformationWithResponseAsync(serviceId, partitionId, onlyQueryPrimaries, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves partitions which are most/least loaded according to specified metric.
     *
     * @param metricName Name of the metric based on which to get ordered list of partitions.
     * @param serviceName The name of a service.
     * @param ordering Ordering of partitions' load.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents data structure that contains top/least loaded partitions for a certain metric along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LoadedPartitionInformationResultList>> getLoadedPartitionInfoListWithResponseAsync(
            String metricName, String serviceName, Ordering ordering, Long maxResults, String continuationToken) {
        final String accept = "application/json";
        return service.getLoadedPartitionInfoList(
                this.getHost(),
                this.getApiVersion(),
                metricName,
                serviceName,
                ordering,
                maxResults,
                continuationToken,
                accept);
    }

    /**
     * Retrieves partitions which are most/least loaded according to specified metric.
     *
     * @param metricName Name of the metric based on which to get ordered list of partitions.
     * @param serviceName The name of a service.
     * @param ordering Ordering of partitions' load.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents data structure that contains top/least loaded partitions for a certain metric on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LoadedPartitionInformationResultList> getLoadedPartitionInfoListAsync(
            String metricName, String serviceName, Ordering ordering, Long maxResults, String continuationToken) {
        return getLoadedPartitionInfoListWithResponseAsync(
                        metricName, serviceName, ordering, maxResults, continuationToken)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
     * health, and other details about the partition.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of partition in the cluster for a service along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedServicePartitionInfoList>> getPartitionInfoListWithResponseAsync(
            String serviceId, String continuationToken, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionInfoList(
                this.getHost(), this.getApiVersion(), serviceId, continuationToken, timeout, accept);
    }

    /**
     * The response includes the partition ID, partitioning scheme information, keys supported by the partition, status,
     * health, and other details about the partition.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of partition in the cluster for a service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedServicePartitionInfoList> getPartitionInfoListAsync(
            String serviceId, String continuationToken, Long timeout) {
        return getPartitionInfoListWithResponseAsync(serviceId, continuationToken, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
     * information, keys supported by the partition, status, health, and other details about the partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServicePartitionInfo>> getPartitionInfoWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionInfo(this.getHost(), this.getApiVersion(), partitionId, timeout, accept);
    }

    /**
     * Gets the information about the specified partition. The response includes the partition ID, partitioning scheme
     * information, keys supported by the partition, status, health, and other details about the partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServicePartitionInfo> getPartitionInfoAsync(UUID partitionId, Long timeout) {
        return getPartitionInfoWithResponseAsync(partitionId, timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist
     * in the cluster.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return name of the service for the specified partition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceNameInfo>> getServiceNameInfoWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getServiceNameInfo(this.getHost(), this.getApiVersion(), partitionId, timeout, accept);
    }

    /**
     * Gets name of the service for the specified partition. A 404 error is returned if the partition ID does not exist
     * in the cluster.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return name of the service for the specified partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceNameInfo> getServiceNameInfoAsync(UUID partitionId, Long timeout) {
        return getServiceNameInfoWithResponseAsync(partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
     * state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If
     * you specify a partition that does not exist in the health store, this request returns an error.
     *
     * @param partitionId The identity of the partition.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param replicasHealthStateFilter Allows filtering the collection of ReplicaHealthState objects on the partition.
     *     The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas
     *     that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If
     *     not specified, all entries will be returned.The state values are flag-based enumeration, so the value could
     *     be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is
     *     6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible
     *     values for this parameter include integer value of one of the following health states.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the health of a Service Fabric partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionHealth>> getPartitionHealthWithResponseAsync(
            UUID partitionId,
            Integer eventsHealthStateFilter,
            Integer replicasHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        final String accept = "application/json";
        return service.getPartitionHealth(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                eventsHealthStateFilter,
                replicasHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                accept);
    }

    /**
     * Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health
     * state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If
     * you specify a partition that does not exist in the health store, this request returns an error.
     *
     * @param partitionId The identity of the partition.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param replicasHealthStateFilter Allows filtering the collection of ReplicaHealthState objects on the partition.
     *     The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas
     *     that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If
     *     not specified, all entries will be returned.The state values are flag-based enumeration, so the value could
     *     be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is
     *     6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible
     *     values for this parameter include integer value of one of the following health states.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the health of a Service Fabric partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionHealth> getPartitionHealthAsync(
            UUID partitionId,
            Integer eventsHealthStateFilter,
            Integer replicasHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout) {
        return getPartitionHealthWithResponseAsync(
                        partitionId,
                        eventsHealthStateFilter,
                        replicasHealthStateFilter,
                        excludeHealthStatistics,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health information of the specified partition. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState
     * objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
     * evaluate the health. If you specify a partition that does not exist in the health store, this request returns an
     * error.
     *
     * @param partitionId The identity of the partition.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param replicasHealthStateFilter Allows filtering the collection of ReplicaHealthState objects on the partition.
     *     The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas
     *     that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If
     *     not specified, all entries will be returned.The state values are flag-based enumeration, so the value could
     *     be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is
     *     6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible
     *     values for this parameter include integer value of one of the following health states.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified partition. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter
     *     the collection of ReplicaHealthState objects on the partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionHealth>> getPartitionHealthUsingPolicyWithResponseAsync(
            UUID partitionId,
            Integer eventsHealthStateFilter,
            Integer replicasHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getPartitionHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                eventsHealthStateFilter,
                replicasHealthStateFilter,
                excludeHealthStatistics,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the health information of the specified partition. If the application health policy is specified, the health
     * evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses
     * the application health policy defined in the application manifest, or the default health policy, if no policy is
     * defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the
     * partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState
     * objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
     * evaluate the health. If you specify a partition that does not exist in the health store, this request returns an
     * error.
     *
     * @param partitionId The identity of the partition.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param replicasHealthStateFilter Allows filtering the collection of ReplicaHealthState objects on the partition.
     *     The value can be obtained from members or bitwise operations on members of HealthStateFilter. Only replicas
     *     that match the filter will be returned. All replicas will be used to evaluate the aggregated health state. If
     *     not specified, all entries will be returned.The state values are flag-based enumeration, so the value could
     *     be a combination of these values obtained using bitwise 'OR' operator. For example, If the provided value is
     *     6 then all of the events with HealthState value of OK (2) and Warning (4) will be returned. The possible
     *     values for this parameter include integer value of one of the following health states.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param excludeHealthStatistics Indicates whether the health statistics should be returned as part of the query
     *     result. False by default. The statistics show the number of children entities in health state Ok, Warning,
     *     and Error.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health information of the specified partition. If the application health policy is specified, the
     *     health evaluation uses it to get the aggregated health state. If the policy is not specified, the health
     *     evaluation uses the application health policy defined in the application manifest, or the default health
     *     policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of
     *     health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter
     *     the collection of ReplicaHealthState objects on the partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionHealth> getPartitionHealthUsingPolicyAsync(
            UUID partitionId,
            Integer eventsHealthStateFilter,
            Integer replicasHealthStateFilter,
            Boolean excludeHealthStatistics,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getPartitionHealthUsingPolicyWithResponseAsync(
                        partitionId,
                        eventsHealthStateFilter,
                        replicasHealthStateFilter,
                        excludeHealthStatistics,
                        timeout,
                        applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetPartitionHealth and check that the report appears in the HealthEvents section.
     *
     * @param partitionId The identity of the partition.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportPartitionHealthWithResponseAsync(
            UUID partitionId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        final String accept = "application/json";
        return service.reportPartitionHealth(
                this.getHost(), this.getApiVersion(), partitionId, immediate, timeout, healthInformation, accept);
    }

    /**
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetPartitionHealth and check that the report appears in the HealthEvents section.
     *
     * @param partitionId The identity of the partition.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportPartitionHealthAsync(
            UUID partitionId, HealthInformation healthInformation, Boolean immediate, Long timeout) {
        return reportPartitionHealthWithResponseAsync(partitionId, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns information about the load of a specified partition. The response includes a list of load reports for a
     * Service Fabric partition. Each report includes the load metric name, value, and last reported time in UTC.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents load information for a partition, which contains the primary, secondary and auxiliary reported
     *     load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for
     *     the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0 along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionLoadInformation>> getPartitionLoadInformationWithResponseAsync(
            UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionLoadInformation(this.getHost(), this.getApiVersion(), partitionId, timeout, accept);
    }

    /**
     * Returns information about the load of a specified partition. The response includes a list of load reports for a
     * Service Fabric partition. Each report includes the load metric name, value, and last reported time in UTC.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents load information for a partition, which contains the primary, secondary and auxiliary reported
     *     load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for
     *     the service of the partition. For default loads, LoadMetricReport's LastReportedUtc is set to 0 on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionLoadInformation> getPartitionLoadInformationAsync(UUID partitionId, Long timeout) {
        return getPartitionLoadInformationWithResponseAsync(partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetPartitionLoadWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.resetPartitionLoad(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetPartitionLoadAsync(UUID partitionId, Long timeout) {
        return resetPartitionLoadWithResponseAsync(partitionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverPartitionWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.recoverPartition(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverPartitionAsync(UUID partitionId, Long timeout) {
        return recoverPartitionWithResponseAsync(partitionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverServicePartitionsWithResponseAsync(String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.recoverServicePartitions(this.getHost(), serviceId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service that is currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverServicePartitionsAsync(String serviceId, Long timeout) {
        return recoverServicePartitionsWithResponseAsync(serviceId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverSystemPartitionsWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.recoverSystemPartitions(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services that are currently
     * stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down
     * cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverSystemPartitionsAsync(Long timeout) {
        return recoverSystemPartitionsWithResponseAsync(timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverAllPartitionsWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.recoverAllPartitions(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * This operation should only be performed if it is known that the replicas that are down cannot be recovered.
     * Incorrect use of this API can cause potential data loss.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverAllPartitionsAsync(Long timeout) {
        return recoverAllPartitionsWithResponseAsync(timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * This command moves the primary replica of a partition of a stateful service, respecting all constraints. If
     * NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it). If
     * NodeName parameter is not specified, primary replica will be moved to a random node in the cluster. If
     * IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
     * constraints.
     *
     * @param partitionId The identity of the partition.
     * @param nodeName The name of the node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> movePrimaryReplicaWithResponseAsync(
            UUID partitionId, String nodeName, Boolean ignoreConstraints, Long timeout) {
        final String accept = "application/json";
        return service.movePrimaryReplica(
                this.getHost(), this.getApiVersion(), partitionId, nodeName, ignoreConstraints, timeout, accept);
    }

    /**
     * This command moves the primary replica of a partition of a stateful service, respecting all constraints. If
     * NodeName parameter is specified, primary will be moved to the specified node (if constraints allow it). If
     * NodeName parameter is not specified, primary replica will be moved to a random node in the cluster. If
     * IgnoreConstraints parameter is specified and set to true, then primary will be moved regardless of the
     * constraints.
     *
     * @param partitionId The identity of the partition.
     * @param nodeName The name of the node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> movePrimaryReplicaAsync(
            UUID partitionId, String nodeName, Boolean ignoreConstraints, Long timeout) {
        return movePrimaryReplicaWithResponseAsync(partitionId, nodeName, ignoreConstraints, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName parameter must be specified to identify the replica that is moved. Source node name must be
     * specified, but new node name can be omitted, and in that case replica is moved to a random node. If
     * IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
     * constraints.
     *
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for secondary replica move.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveSecondaryReplicaWithResponseAsync(
            UUID partitionId, String currentNodeName, String newNodeName, Boolean ignoreConstraints, Long timeout) {
        final String accept = "application/json";
        return service.moveSecondaryReplica(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                currentNodeName,
                newNodeName,
                ignoreConstraints,
                timeout,
                accept);
    }

    /**
     * This command moves the secondary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName parameter must be specified to identify the replica that is moved. Source node name must be
     * specified, but new node name can be omitted, and in that case replica is moved to a random node. If
     * IgnoreConstraints parameter is specified and set to true, then secondary will be moved regardless of the
     * constraints.
     *
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for secondary replica move.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> moveSecondaryReplicaAsync(
            UUID partitionId, String currentNodeName, String newNodeName, Boolean ignoreConstraints, Long timeout) {
        return moveSecondaryReplicaWithResponseAsync(
                        partitionId, currentNodeName, newNodeName, ignoreConstraints, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Updates the load value and predicted load value for all the partitions provided for specified metrics.
     *
     * @param partitionMetricLoadDescriptionList Description of updating load for list of partitions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of results of the call UpdatePartitionLoad along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedUpdatePartitionLoadResultList>> updatePartitionLoadWithResponseAsync(
            List<PartitionMetricLoadDescription> partitionMetricLoadDescriptionList,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        final String accept = "application/json";
        return service.updatePartitionLoad(
                this.getHost(),
                this.getApiVersion(),
                continuationToken,
                maxResults,
                timeout,
                partitionMetricLoadDescriptionList,
                accept);
    }

    /**
     * Updates the load value and predicted load value for all the partitions provided for specified metrics.
     *
     * @param partitionMetricLoadDescriptionList Description of updating load for list of partitions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of results of the call UpdatePartitionLoad on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedUpdatePartitionLoadResultList> updatePartitionLoadAsync(
            List<PartitionMetricLoadDescription> partitionMetricLoadDescriptionList,
            String continuationToken,
            Long maxResults,
            Long timeout) {
        return updatePartitionLoadWithResponseAsync(
                        partitionMetricLoadDescriptionList, continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This command moves the instance of a partition of a stateless service, respecting all constraints. Partition id
     * and service name must be specified to be able to move the instance. CurrentNodeName when specified identifies the
     * instance that is moved. If not specified, random instance will be moved New node name can be omitted, and in that
     * case instance is moved to a random node. If IgnoreConstraints parameter is specified and set to true, then
     * instance will be moved regardless of the constraints.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for instance move. If not specified, instance is moved from a
     *     random node.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveInstanceWithResponseAsync(
            String serviceId,
            UUID partitionId,
            String currentNodeName,
            String newNodeName,
            Boolean ignoreConstraints,
            Long timeout) {
        final String accept = "application/json";
        return service.moveInstance(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionId,
                currentNodeName,
                newNodeName,
                ignoreConstraints,
                timeout,
                accept);
    }

    /**
     * This command moves the instance of a partition of a stateless service, respecting all constraints. Partition id
     * and service name must be specified to be able to move the instance. CurrentNodeName when specified identifies the
     * instance that is moved. If not specified, random instance will be moved New node name can be omitted, and in that
     * case instance is moved to a random node. If IgnoreConstraints parameter is specified and set to true, then
     * instance will be moved regardless of the constraints.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for instance move. If not specified, instance is moved from a
     *     random node.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> moveInstanceAsync(
            String serviceId,
            UUID partitionId,
            String currentNodeName,
            String newNodeName,
            Boolean ignoreConstraints,
            Long timeout) {
        return moveInstanceWithResponseAsync(
                        serviceId, partitionId, currentNodeName, newNodeName, ignoreConstraints, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This command moves the auxiliary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName can be omitted, and in that case a random auxiliary replica is chosen. NewNodeName can be
     * omitted, and in that case the auxiliary replica is moved to a random node. If IgnoreConstraints parameter is
     * specified and set to true, then auxiliary will be moved regardless of the constraints.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for instance move. If not specified, instance is moved from a
     *     random node.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> moveAuxiliaryReplicaWithResponseAsync(
            String serviceId,
            UUID partitionId,
            String currentNodeName,
            String newNodeName,
            Boolean ignoreConstraints,
            Long timeout) {
        final String accept = "application/json";
        return service.moveAuxiliaryReplica(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionId,
                currentNodeName,
                newNodeName,
                ignoreConstraints,
                timeout,
                accept);
    }

    /**
     * This command moves the auxiliary replica of a partition of a stateful service, respecting all constraints.
     * CurrentNodeName can be omitted, and in that case a random auxiliary replica is chosen. NewNodeName can be
     * omitted, and in that case the auxiliary replica is moved to a random node. If IgnoreConstraints parameter is
     * specified and set to true, then auxiliary will be moved regardless of the constraints.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param currentNodeName The name of the source node for instance move. If not specified, instance is moved from a
     *     random node.
     * @param newNodeName The name of the target node for secondary replica or instance move. If not specified, replica
     *     or instance is moved to a random node.
     * @param ignoreConstraints Ignore constraints when moving a replica or instance. If this parameter is not
     *     specified, all constraints are honored.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> moveAuxiliaryReplicaAsync(
            String serviceId,
            UUID partitionId,
            String currentNodeName,
            String newNodeName,
            Boolean ignoreConstraints,
            Long timeout) {
        return moveAuxiliaryReplicaWithResponseAsync(
                        serviceId, partitionId, currentNodeName, newNodeName, ignoreConstraints, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that
     * run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be
     * running for each repair action to run automatically. These are currently only available in specially-configured
     * Azure Cloud Services.
     *
     * <p>To create a manual repair task, provide the set of impacted node names and the expected impact. When the state
     * of the created repair task changes to approved, you can safely perform repair actions on those nodes.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepairTaskUpdateInfo>> createRepairTaskWithResponseAsync(RepairTask repairTask) {
        final String accept = "application/json";
        return service.createRepairTask(this.getHost(), this.getApiVersion(), repairTask, accept);
    }

    /**
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that
     * run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be
     * running for each repair action to run automatically. These are currently only available in specially-configured
     * Azure Cloud Services.
     *
     * <p>To create a manual repair task, provide the set of impacted node names and the expected impact. When the state
     * of the created repair task changes to approved, you can safely perform repair actions on those nodes.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepairTaskUpdateInfo> createRepairTaskAsync(RepairTask repairTask) {
        return createRepairTaskWithResponseAsync(repairTask).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskCancelDescription Describes the repair task to be cancelled.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepairTaskUpdateInfo>> cancelRepairTaskWithResponseAsync(
            RepairTaskCancelDescription repairTaskCancelDescription) {
        final String accept = "application/json";
        return service.cancelRepairTask(this.getHost(), this.getApiVersion(), repairTaskCancelDescription, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskCancelDescription Describes the repair task to be cancelled.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepairTaskUpdateInfo> cancelRepairTaskAsync(RepairTaskCancelDescription repairTaskCancelDescription) {
        return cancelRepairTaskWithResponseAsync(repairTaskCancelDescription)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskDeleteDescription Describes the repair task to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRepairTaskWithResponseAsync(
            RepairTaskDeleteDescription repairTaskDeleteDescription) {
        final String accept = "application/json";
        return service.deleteRepairTask(this.getHost(), this.getApiVersion(), repairTaskDeleteDescription, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskDeleteDescription Describes the repair task to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRepairTaskAsync(RepairTaskDeleteDescription repairTaskDeleteDescription) {
        return deleteRepairTaskWithResponseAsync(repairTaskDeleteDescription).flatMap(ignored -> Mono.empty());
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param taskIdFilter The repair task ID prefix to be matched.
     * @param stateFilter A bitwise-OR of the following values, specifying which task states should be included in the
     *     result list.
     *     <p>- 1 - Created - 2 - Claimed - 4 - Preparing - 8 - Approved - 16 - Executing - 32 - Restoring - 64 -
     *     Completed.
     * @param executorFilter The name of the repair executor whose claimed tasks should be included in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of repair tasks along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<RepairTask>>> getRepairTaskListWithResponseAsync(
            String taskIdFilter, Integer stateFilter, String executorFilter) {
        final String accept = "application/json";
        return service.getRepairTaskList(
                this.getHost(), this.getApiVersion(), taskIdFilter, stateFilter, executorFilter, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param taskIdFilter The repair task ID prefix to be matched.
     * @param stateFilter A bitwise-OR of the following values, specifying which task states should be included in the
     *     result list.
     *     <p>- 1 - Created - 2 - Claimed - 4 - Preparing - 8 - Approved - 16 - Executing - 32 - Restoring - 64 -
     *     Completed.
     * @param executorFilter The name of the repair executor whose claimed tasks should be included in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of repair tasks on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<RepairTask>> getRepairTaskListAsync(
            String taskIdFilter, Integer stateFilter, String executorFilter) {
        return getRepairTaskListWithResponseAsync(taskIdFilter, stateFilter, executorFilter)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskApproveDescription Describes the repair task to be approved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepairTaskUpdateInfo>> forceApproveRepairTaskWithResponseAsync(
            RepairTaskApproveDescription repairTaskApproveDescription) {
        final String accept = "application/json";
        return service.forceApproveRepairTask(
                this.getHost(), this.getApiVersion(), repairTaskApproveDescription, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskApproveDescription Describes the repair task to be approved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepairTaskUpdateInfo> forceApproveRepairTaskAsync(
            RepairTaskApproveDescription repairTaskApproveDescription) {
        return forceApproveRepairTaskWithResponseAsync(repairTaskApproveDescription)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepairTaskUpdateInfo>> updateRepairTaskHealthPolicyWithResponseAsync(
            RepairTaskUpdateHealthPolicyDescription repairTaskUpdateHealthPolicyDescription) {
        final String accept = "application/json";
        return service.updateRepairTaskHealthPolicy(
                this.getHost(), this.getApiVersion(), repairTaskUpdateHealthPolicyDescription, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepairTaskUpdateInfo> updateRepairTaskHealthPolicyAsync(
            RepairTaskUpdateHealthPolicyDescription repairTaskUpdateHealthPolicyDescription) {
        return updateRepairTaskHealthPolicyWithResponseAsync(repairTaskUpdateHealthPolicyDescription)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code along
     *     with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RepairTaskUpdateInfo>> updateRepairExecutionStateWithResponseAsync(RepairTask repairTask) {
        final String accept = "application/json";
        return service.updateRepairExecutionState(this.getHost(), this.getApiVersion(), repairTask, accept);
    }

    /**
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param repairTask Describes the repair task to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the result of an operation that created or updated a repair task.
     *     <p>This type supports the Service Fabric platform; it is not meant to be used directly from your code on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RepairTaskUpdateInfo> updateRepairExecutionStateAsync(RepairTask repairTask) {
        return updateRepairExecutionStateWithResponseAsync(repairTask).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
     * the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @param partitionId The identity of the partition.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replicas in the cluster for a given partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedReplicaInfoList>> getReplicaInfoListWithResponseAsync(
            UUID partitionId, String continuationToken, Long timeout) {
        final String accept = "application/json";
        return service.getReplicaInfoList(
                this.getHost(), this.getApiVersion(), partitionId, continuationToken, timeout, accept);
    }

    /**
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes
     * the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @param partitionId The identity of the partition.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replicas in the cluster for a given partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedReplicaInfoList> getReplicaInfoListAsync(
            UUID partitionId, String continuationToken, Long timeout) {
        return getReplicaInfoListWithResponseAsync(partitionId, continuationToken, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the identity, status, health, node name, uptime, and other details about the replica
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReplicaInfo>> getReplicaInfoWithResponseAsync(
            UUID partitionId, String replicaId, Long timeout) {
        final String accept = "application/json";
        return service.getReplicaInfo(this.getHost(), this.getApiVersion(), partitionId, replicaId, timeout, accept);
    }

    /**
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the identity, status, health, node name, uptime, and other details about the replica on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReplicaInfo> getReplicaInfoAsync(UUID partitionId, String replicaId, Long timeout) {
        return getReplicaInfoWithResponseAsync(partitionId, replicaId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the replica based on the health state.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     *     events reported on the replica based on the health state along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReplicaHealth>> getReplicaHealthWithResponseAsync(
            UUID partitionId, String replicaId, Integer eventsHealthStateFilter, Long timeout) {
        final String accept = "application/json";
        return service.getReplicaHealth(
                this.getHost(), this.getApiVersion(), partitionId, replicaId, eventsHealthStateFilter, timeout, accept);
    }

    /**
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     * events reported on the replica based on the health state.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health
     *     events reported on the replica based on the health state on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReplicaHealth> getReplicaHealthAsync(
            UUID partitionId, String replicaId, Integer eventsHealthStateFilter, Long timeout) {
        return getReplicaHealthWithResponseAsync(partitionId, replicaId, eventsHealthStateFilter, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use
     * EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This
     * API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored
     * while evaluating the health of the replica.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric stateful service replica or stateless service instance. Use
     *     EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     *     state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReplicaHealth>> getReplicaHealthUsingPolicyWithResponseAsync(
            UUID partitionId,
            String replicaId,
            Integer eventsHealthStateFilter,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getReplicaHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                replicaId,
                eventsHealthStateFilter,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use
     * EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     * state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This
     * API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored
     * while evaluating the health of the replica.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health of a Service Fabric stateful service replica or stateless service instance. Use
     *     EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health
     *     state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReplicaHealth> getReplicaHealthUsingPolicyAsync(
            UUID partitionId,
            String replicaId,
            Integer eventsHealthStateFilter,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getReplicaHealthUsingPolicyWithResponseAsync(
                        partitionId, replicaId, eventsHealthStateFilter, timeout, applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param serviceKind The kind of service replica (Stateless or Stateful) for which the health is being reported.
     *     Following are the possible values.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportReplicaHealthWithResponseAsync(
            UUID partitionId,
            String replicaId,
            ReplicaHealthReportServiceKind serviceKind,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        final String accept = "application/json";
        return service.reportReplicaHealth(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                replicaId,
                serviceKind,
                immediate,
                timeout,
                healthInformation,
                accept);
    }

    /**
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the
     * source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway
     * Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the
     * health store after extra validation. For example, the health store may reject the report because of an invalid
     * parameter, like a stale sequence number. To see whether the report was applied in the health store, run
     * GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param serviceKind The kind of service replica (Stateless or Stateful) for which the health is being reported.
     *     Following are the possible values.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportReplicaHealthAsync(
            UUID partitionId,
            String replicaId,
            ReplicaHealthReportServiceKind serviceKind,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        return reportReplicaHealthWithResponseAsync(
                        partitionId, replicaId, serviceKind, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information
     * include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
     * information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
     * replicas matching the specified values for those parameters.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about replicas deployed on a Service Fabric node along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedServiceReplicaInfo>>> getDeployedServiceReplicaInfoListWithResponseAsync(
            String nodeName, String applicationId, UUID partitionId, String serviceManifestName, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServiceReplicaInfoList(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                partitionId,
                serviceManifestName,
                timeout,
                accept);
    }

    /**
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information
     * include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other
     * information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed
     * replicas matching the specified values for those parameters.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list containing the information about replicas deployed on a Service Fabric node on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedServiceReplicaInfo>> getDeployedServiceReplicaInfoListAsync(
            String nodeName, String applicationId, UUID partitionId, String serviceManifestName, Long timeout) {
        return getDeployedServiceReplicaInfoListWithResponseAsync(
                        nodeName, applicationId, partitionId, serviceManifestName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedServiceReplicaDetailInfo>> getDeployedServiceReplicaDetailInfoWithResponseAsync(
            String nodeName, UUID partitionId, String replicaId, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServiceReplicaDetailInfo(
                this.getHost(), this.getApiVersion(), nodeName, partitionId, replicaId, timeout, accept);
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replica deployed on a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedServiceReplicaDetailInfo> getDeployedServiceReplicaDetailInfoAsync(
            String nodeName, UUID partitionId, String replicaId, Long timeout) {
        return getDeployedServiceReplicaDetailInfoWithResponseAsync(nodeName, partitionId, replicaId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replica deployed on a Service Fabric node along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedServiceReplicaDetailInfo>>
            getDeployedServiceReplicaDetailInfoByPartitionIdWithResponseAsync(
                    String nodeName, UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServiceReplicaDetailInfoByPartitionId(
                this.getHost(), this.getApiVersion(), nodeName, partitionId, timeout, accept);
    }

    /**
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service
     * name, current service operation, current service operation start date time, partition ID, replica/instance ID,
     * reported load, and other information.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replica deployed on a Service Fabric node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedServiceReplicaDetailInfo> getDeployedServiceReplicaDetailInfoByPartitionIdAsync(
            String nodeName, UUID partitionId, Long timeout) {
        return getDeployedServiceReplicaDetailInfoByPartitionIdWithResponseAsync(nodeName, partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks
     * performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartReplicaWithResponseAsync(
            String nodeName, UUID partitionId, String replicaId, Long timeout) {
        final String accept = "application/json";
        return service.restartReplica(
                this.getHost(), this.getApiVersion(), nodeName, partitionId, replicaId, timeout, accept);
    }

    /**
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks
     * performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartReplicaAsync(String nodeName, UUID partitionId, String replicaId, Long timeout) {
        return restartReplicaWithResponseAsync(nodeName, partitionId, replicaId, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
     * removal closes the replica, transitions the replica to the role None, and then removes all of the state
     * information of the replica from the cluster. This API tests the replica state removal path, and simulates the
     * report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is
     * used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag
     * impacts all other replicas hosted in the same process.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeReplicaWithResponseAsync(
            String nodeName, UUID partitionId, String replicaId, Boolean forceRemove, Long timeout) {
        final String accept = "application/json";
        return service.removeReplica(
                this.getHost(), this.getApiVersion(), nodeName, partitionId, replicaId, forceRemove, timeout, accept);
    }

    /**
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The
     * removal closes the replica, transitions the replica to the role None, and then removes all of the state
     * information of the replica from the cluster. This API tests the replica state removal path, and simulates the
     * report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is
     * used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag
     * impacts all other replicas hosted in the same process.
     *
     * @param nodeName The name of the node.
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param forceRemove Remove a Service Fabric application or service forcefully without going through the graceful
     *     shutdown sequence. This parameter can be used to forcefully delete an application or service for which delete
     *     is timing out due to issues in the service code that prevents graceful close of replicas.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeReplicaAsync(
            String nodeName, UUID partitionId, String replicaId, Boolean forceRemove, Long timeout) {
        return removeReplicaWithResponseAsync(nodeName, partitionId, replicaId, forceRemove, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedServicePackageInfo>>> getDeployedServicePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServicePackageInfoList(
                this.getHost(), this.getApiVersion(), nodeName, applicationId, timeout, accept);
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of deployed service package information on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedServicePackageInfo>> getDeployedServicePackageInfoListAsync(
            String nodeName, String applicationId, Long timeout) {
        return getDeployedServicePackageInfoListWithResponseAsync(nodeName, applicationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     * These results are of service packages whose name match exactly the service package name specified as the
     * parameter.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of deployed service package information along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedServicePackageInfo>>> getDeployedServicePackageInfoListByNameWithResponseAsync(
            String nodeName, String applicationId, String servicePackageName, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServicePackageInfoListByName(
                this.getHost(), this.getApiVersion(), nodeName, applicationId, servicePackageName, timeout, accept);
    }

    /**
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     * These results are of service packages whose name match exactly the service package name specified as the
     * parameter.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of deployed service package information on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedServicePackageInfo>> getDeployedServicePackageInfoListByNameAsync(
            String nodeName, String applicationId, String servicePackageName, Long timeout) {
        return getDeployedServicePackageInfoListByNameWithResponseAsync(
                        nodeName, applicationId, servicePackageName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed service package based on health state.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedServicePackageHealth>> getDeployedServicePackageHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            Integer eventsHealthStateFilter,
            Long timeout) {
        final String accept = "application/json";
        return service.getDeployedServicePackageHealth(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                servicePackageName,
                eventsHealthStateFilter,
                timeout,
                accept);
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the
     * deployed service package based on health state.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            Integer eventsHealthStateFilter,
            Long timeout) {
        return getDeployedServicePackageHealthWithResponseAsync(
                        nodeName, applicationId, servicePackageName, eventsHealthStateFilter, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
     * HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy
     * to optionally override the health policies used to evaluate the health. This API only uses
     * 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
     * evaluating the health of the deployed service package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeployedServicePackageHealth>> getDeployedServicePackageHealthUsingPolicyWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            Integer eventsHealthStateFilter,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        final String accept = "application/json";
        return service.getDeployedServicePackageHealthUsingPolicy(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                servicePackageName,
                eventsHealthStateFilter,
                timeout,
                applicationHealthPolicy,
                accept);
    }

    /**
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric
     * node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
     * HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy
     * to optionally override the health policies used to evaluate the health. This API only uses
     * 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The rest of the fields are ignored while
     * evaluating the health of the deployed service package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param eventsHealthStateFilter Allows filtering the collection of HealthEvent objects returned based on health
     *     state. The possible values for this parameter include integer value of one of the following health states.
     *     Only events that match the filter are returned. All events are used to evaluate the aggregated health state.
     *     If not specified, all entries are returned. The state values are flag-based enumeration, so the value could
     *     be a combination of these values, obtained using the bitwise 'OR' operator. For example, If the provided
     *     value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.
     *     <p>- Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match
     *     any HealthState value. Used in order to return no results on a given collection of states. The value is 1. -
     *     Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches
     *     input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState
     *     value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is
     *     65535.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param applicationHealthPolicy Describes the health policies used to evaluate the health of an application or one
     *     of its children. If not present, the health evaluation uses the health policy from application manifest or
     *     the default health policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about health of a service package for a specific application deployed on a Service Fabric
     *     node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeployedServicePackageHealth> getDeployedServicePackageHealthUsingPolicyAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            Integer eventsHealthStateFilter,
            Long timeout,
            ApplicationHealthPolicy applicationHealthPolicy) {
        return getDeployedServicePackageHealthUsingPolicyWithResponseAsync(
                        nodeName,
                        applicationId,
                        servicePackageName,
                        eventsHealthStateFilter,
                        timeout,
                        applicationHealthPolicy)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must
     * contain the information about the source of the health report and property on which it is reported. The report is
     * sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the
     * gateway, but rejected by the health store after extra validation. For example, the health store may reject the
     * report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in
     * the health store, get deployed service package health and check that the report appears in the HealthEvents
     * section.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reportDeployedServicePackageHealthWithResponseAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        final String accept = "application/json";
        return service.reportDeployedServicePackageHealth(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                servicePackageName,
                immediate,
                timeout,
                healthInformation,
                accept);
    }

    /**
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must
     * contain the information about the source of the health report and property on which it is reported. The report is
     * sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the
     * gateway, but rejected by the health store after extra validation. For example, the health store may reject the
     * report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in
     * the health store, get deployed service package health and check that the report appears in the HealthEvents
     * section.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param servicePackageName The name of the service package.
     * @param healthInformation Describes the health information for the health report. This information needs to be
     *     present in all of the health reports sent to the health manager.
     * @param immediate A flag that indicates whether the report should be sent immediately. A health report is sent to
     *     a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the
     *     report is sent immediately from HTTP Gateway to the health store, regardless of the fabric client settings
     *     that the HTTP Gateway Application is using. This is useful for critical reports that should be sent as soon
     *     as possible. Depending on timing and other conditions, sending the report may still fail, for example if the
     *     HTTP Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is
     *     sent based on the health client settings from the HTTP Gateway. Therefore, it will be batched according to
     *     the HealthReportSendInterval configuration. This is the recommended setting because it allows the health
     *     client to optimize health reporting messages to health store as well as health report processing. By default,
     *     reports are not sent immediately.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reportDeployedServicePackageHealthAsync(
            String nodeName,
            String applicationId,
            String servicePackageName,
            HealthInformation healthInformation,
            Boolean immediate,
            Long timeout) {
        return reportDeployedServicePackageHealthWithResponseAsync(
                        nodeName, applicationId, servicePackageName, healthInformation, immediate, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * This API provides a way to download code packages including the container images on a specific node outside of
     * the normal application deployment and upgrade path. This is useful for the large code packages and container
     * images to be present on the node before the actual application deployment and upgrade, thus significantly
     * reducing the total time required for the deployment or upgrade.
     *
     * @param nodeName The name of the node.
     * @param deployServicePackageToNodeDescription Describes information for deploying a service package to a Service
     *     Fabric node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deployServicePackageToNodeWithResponseAsync(
            String nodeName,
            DeployServicePackageToNodeDescription deployServicePackageToNodeDescription,
            Long timeout) {
        final String accept = "application/json";
        return service.deployServicePackageToNode(
                this.getHost(), this.getApiVersion(), nodeName, timeout, deployServicePackageToNodeDescription, accept);
    }

    /**
     * This API provides a way to download code packages including the container images on a specific node outside of
     * the normal application deployment and upgrade path. This is useful for the large code packages and container
     * images to be present on the node before the actual application deployment and upgrade, thus significantly
     * reducing the total time required for the deployment or upgrade.
     *
     * @param nodeName The name of the node.
     * @param deployServicePackageToNodeDescription Describes information for deploying a service package to a Service
     *     Fabric node.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deployServicePackageToNodeAsync(
            String nodeName,
            DeployServicePackageToNodeDescription deployServicePackageToNodeDescription,
            Long timeout) {
        return deployServicePackageToNodeWithResponseAsync(nodeName, deployServicePackageToNodeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of code packages deployed on a Service Fabric node for the given application along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DeployedCodePackageInfo>>> getDeployedCodePackageInfoListWithResponseAsync(
            String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout) {
        final String accept = "application/json";
        return service.getDeployedCodePackageInfoList(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                serviceManifestName,
                codePackageName,
                timeout,
                accept);
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of code packages deployed on a Service Fabric node for the given application on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DeployedCodePackageInfo>> getDeployedCodePackageInfoListAsync(
            String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout) {
        return getDeployedCodePackageInfoListWithResponseAsync(
                        nodeName, applicationId, serviceManifestName, codePackageName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process,
     * which will restart all the user service replicas hosted in that process.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to
     *     restart.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartDeployedCodePackageWithResponseAsync(
            String nodeName,
            String applicationId,
            RestartDeployedCodePackageDescription restartDeployedCodePackageDescription,
            Long timeout) {
        final String accept = "application/json";
        return service.restartDeployedCodePackage(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                timeout,
                restartDeployedCodePackageDescription,
                accept);
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process,
     * which will restart all the user service replicas hosted in that process.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to
     *     restart.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartDeployedCodePackageAsync(
            String nodeName,
            String applicationId,
            RestartDeployedCodePackageDescription restartDeployedCodePackageDescription,
            Long timeout) {
        return restartDeployedCodePackageWithResponseAsync(
                        nodeName, applicationId, restartDeployedCodePackageDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param tail Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container logs for container deployed on a Service Fabric node for the given code package along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ContainerLogs>> getContainerLogsDeployedOnNodeWithResponseAsync(
            String nodeName,
            String applicationId,
            String serviceManifestName,
            String codePackageName,
            String tail,
            Boolean previous,
            Long timeout) {
        final String accept = "application/json";
        return service.getContainerLogsDeployedOnNode(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                serviceManifestName,
                codePackageName,
                tail,
                previous,
                timeout,
                accept);
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param tail Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container logs for container deployed on a Service Fabric node for the given code package on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerLogs> getContainerLogsDeployedOnNodeAsync(
            String nodeName,
            String applicationId,
            String serviceManifestName,
            String codePackageName,
            String tail,
            Boolean previous,
            Long timeout) {
        return getContainerLogsDeployedOnNodeWithResponseAsync(
                        nodeName, applicationId, serviceManifestName, codePackageName, tail, previous, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric
     *     node.
     * @param containerApiRequestBody Parameters for making container API call.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body that wraps container API result along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ContainerApiResponse>> invokeContainerApiWithResponseAsync(
            String nodeName,
            String applicationId,
            String serviceManifestName,
            String codePackageName,
            String codePackageInstanceId,
            ContainerApiRequestBody containerApiRequestBody,
            Long timeout) {
        final String accept = "application/json";
        return service.invokeContainerApi(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                applicationId,
                serviceManifestName,
                codePackageName,
                codePackageInstanceId,
                timeout,
                containerApiRequestBody,
                accept);
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     *
     * @param nodeName The name of the node.
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service
     *     Fabric cluster.
     * @param codePackageName The name of code package specified in service manifest registered as part of an
     *     application type in a Service Fabric cluster.
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric
     *     node.
     * @param containerApiRequestBody Parameters for making container API call.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body that wraps container API result on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContainerApiResponse> invokeContainerApiAsync(
            String nodeName,
            String applicationId,
            String serviceManifestName,
            String codePackageName,
            String codePackageInstanceId,
            ContainerApiRequestBody containerApiRequestBody,
            Long timeout) {
        return invokeContainerApiWithResponseAsync(
                        nodeName,
                        applicationId,
                        serviceManifestName,
                        codePackageName,
                        codePackageInstanceId,
                        containerApiRequestBody,
                        timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Compose is a file format that describes multi-container applications. This API allows deploying container based
     * applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status
     * can be tracked via the `GetComposeDeploymentStatus` API.
     *
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createComposeDeploymentWithResponseAsync(
            CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout) {
        final String accept = "application/json";
        return service.createComposeDeployment(
                this.getHost(), this.getApiVersion(), timeout, createComposeDeploymentDescription, accept);
    }

    /**
     * Compose is a file format that describes multi-container applications. This API allows deploying container based
     * applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status
     * can be tracked via the `GetComposeDeploymentStatus` API.
     *
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createComposeDeploymentAsync(
            CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout) {
        return createComposeDeploymentWithResponseAsync(createComposeDeploymentDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the status of the compose deployment that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
     * and other details about the deployment.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric compose deployment along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ComposeDeploymentStatusInfo>> getComposeDeploymentStatusWithResponseAsync(
            String deploymentName, Long timeout) {
        final String accept = "application/json";
        return service.getComposeDeploymentStatus(
                this.getHost(), this.getApiVersion(), deploymentName, timeout, accept);
    }

    /**
     * Returns the status of the compose deployment that was created or in the process of being created in the Service
     * Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status,
     * and other details about the deployment.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a Service Fabric compose deployment on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeDeploymentStatusInfo> getComposeDeploymentStatusAsync(String deploymentName, Long timeout) {
        return getComposeDeploymentStatusWithResponseAsync(deploymentName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the status about the compose deployments that were created or in the process of being created in the Service
     * Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
     * list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
     * can be used to get the next page.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status about the compose deployments that were created or in the process of being created in the
     *     Service Fabric cluster along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedComposeDeploymentStatusInfoList>> getComposeDeploymentStatusListWithResponseAsync(
            String continuationToken, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getComposeDeploymentStatusList(
                this.getHost(), this.getApiVersion(), continuationToken, maxResults, timeout, accept);
    }

    /**
     * Gets the status about the compose deployments that were created or in the process of being created in the Service
     * Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the
     * list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which
     * can be used to get the next page.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status about the compose deployments that were created or in the process of being created in the
     *     Service Fabric cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedComposeDeploymentStatusInfoList> getComposeDeploymentStatusListAsync(
            String continuationToken, Long maxResults, Long timeout) {
        return getComposeDeploymentStatusListWithResponseAsync(continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging
     * application health issues.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the parameters for a compose deployment upgrade along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ComposeDeploymentUpgradeProgressInfo>> getComposeDeploymentUpgradeProgressWithResponseAsync(
            String deploymentName, Long timeout) {
        final String accept = "application/json";
        return service.getComposeDeploymentUpgradeProgress(
                this.getHost(), this.getApiVersion(), deploymentName, timeout, accept);
    }

    /**
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging
     * application health issues.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the parameters for a compose deployment upgrade on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ComposeDeploymentUpgradeProgressInfo> getComposeDeploymentUpgradeProgressAsync(
            String deploymentName, Long timeout) {
        return getComposeDeploymentUpgradeProgressWithResponseAsync(deploymentName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Deletes an existing Service Fabric compose deployment.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeComposeDeploymentWithResponseAsync(String deploymentName, Long timeout) {
        final String accept = "application/json";
        return service.removeComposeDeployment(this.getHost(), this.getApiVersion(), deploymentName, timeout, accept);
    }

    /**
     * Deletes an existing Service Fabric compose deployment.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeComposeDeploymentAsync(String deploymentName, Long timeout) {
        return removeComposeDeploymentWithResponseAsync(deploymentName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     *
     * @param deploymentName The identity of the deployment.
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName,
            ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription,
            Long timeout) {
        final String accept = "application/json";
        return service.startComposeDeploymentUpgrade(
                this.getHost(),
                this.getApiVersion(),
                deploymentName,
                timeout,
                composeDeploymentUpgradeDescription,
                accept);
    }

    /**
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     *
     * @param deploymentName The identity of the deployment.
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startComposeDeploymentUpgradeAsync(
            String deploymentName,
            ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription,
            Long timeout) {
        return startComposeDeploymentUpgradeWithResponseAsync(
                        deploymentName, composeDeploymentUpgradeDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Rollback a service fabric compose deployment upgrade.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startRollbackComposeDeploymentUpgradeWithResponseAsync(
            String deploymentName, Long timeout) {
        final String accept = "application/json";
        return service.startRollbackComposeDeploymentUpgrade(
                this.getHost(), this.getApiVersion(), deploymentName, timeout, accept);
    }

    /**
     * Rollback a service fabric compose deployment upgrade.
     *
     * @param deploymentName The identity of the deployment.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startRollbackComposeDeploymentUpgradeAsync(String deploymentName, Long timeout) {
        return startRollbackComposeDeploymentUpgradeWithResponseAsync(deploymentName, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos
     * and the status of the Chaos Schedule.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running
     *     Chaos and the status of the Chaos Schedule along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Chaos>> getChaosWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getChaos(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos
     * and the status of the Chaos Schedule.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running
     *     Chaos and the status of the Chaos Schedule on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Chaos> getChaosAsync(Long timeout) {
        return getChaosWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is
     * already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer
     * to the article [Induce controlled Chaos in Service Fabric
     * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     *
     * @param chaosParameters Describes all the parameters to configure a Chaos run.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startChaosWithResponseAsync(ChaosParameters chaosParameters, Long timeout) {
        final String accept = "application/json";
        return service.startChaos(this.getHost(), this.getApiVersion(), timeout, chaosParameters, accept);
    }

    /**
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is
     * already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer
     * to the article [Induce controlled Chaos in Service Fabric
     * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     *
     * @param chaosParameters Describes all the parameters to configure a Chaos run.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startChaosAsync(ChaosParameters chaosParameters, Long timeout) {
        return startChaosWithResponseAsync(chaosParameters, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
     * current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state
     * and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume
     * scheduling.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopChaosWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.stopChaos(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The
     * current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state
     * and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume
     * scheduling.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopChaosAsync(Long timeout) {
        return stopChaosWithResponseAsync(timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
     * segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify
     * both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the
     * Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get
     * the next segment you make a call to this API with the continuation token.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param startTimeUtc The Windows file time representing the start time of the time range for which a Chaos report
     *     is to be generated. Consult [DateTime.ToFileTimeUtc
     *     Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param endTimeUtc The Windows file time representing the end time of the time range for which a Chaos report is
     *     to be generated. Consult [DateTime.ToFileTimeUtc
     *     Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the list of Chaos events and the continuation token to get the next segment along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChaosEventsSegment>> getChaosEventsWithResponseAsync(
            String continuationToken, String startTimeUtc, String endTimeUtc, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getChaosEvents(
                this.getHost(),
                this.getApiVersion(),
                continuationToken,
                startTimeUtc,
                endTimeUtc,
                maxResults,
                timeout,
                accept);
    }

    /**
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new
     * segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify
     * both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the
     * Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get
     * the next segment you make a call to this API with the continuation token.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param startTimeUtc The Windows file time representing the start time of the time range for which a Chaos report
     *     is to be generated. Consult [DateTime.ToFileTimeUtc
     *     Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param endTimeUtc The Windows file time representing the end time of the time range for which a Chaos report is
     *     to be generated. Consult [DateTime.ToFileTimeUtc
     *     Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains the list of Chaos events and the continuation token to get the next segment on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChaosEventsSegment> getChaosEventsAsync(
            String continuationToken, String startTimeUtc, String endTimeUtc, Long maxResults, Long timeout) {
        return getChaosEventsWithResponseAsync(continuationToken, startTimeUtc, endTimeUtc, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChaosScheduleDescription>> getChaosScheduleWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getChaosSchedule(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChaosScheduleDescription> getChaosScheduleAsync(Long timeout) {
        return getChaosScheduleWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the
     * provided version matches the version on the server. When updating the Chaos Schedule, the version on the server
     * is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is
     * running when this call is made, the call will fail.
     *
     * @param chaosSchedule Describes the schedule used by Chaos.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postChaosScheduleWithResponseAsync(
            ChaosScheduleDescription chaosSchedule, Long timeout) {
        final String accept = "application/json";
        return service.postChaosSchedule(this.getHost(), this.getApiVersion(), timeout, chaosSchedule, accept);
    }

    /**
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the
     * provided version matches the version on the server. When updating the Chaos Schedule, the version on the server
     * is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is
     * running when this call is made, the call will fail.
     *
     * @param chaosSchedule Describes the schedule used by Chaos.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postChaosScheduleAsync(ChaosScheduleDescription chaosSchedule, Long timeout) {
        return postChaosScheduleWithResponseAsync(chaosSchedule, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
     * connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the
     * specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
     * an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
     * uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
     * aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
     * last, to let the image store service know that the folder is complete.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileWithResponseAsync(String contentPath, Long timeout) {
        final String accept = "application/json";
        return service.uploadFile(this.getHost(), this.getApiVersion(), contentPath, timeout, accept);
    }

    /**
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the
     * connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the
     * specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is
     * an empty file named "_.dir". The mark file is generated by the image store service when all files in a folder are
     * uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't
     * aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it
     * last, to let the image store service know that the folder is complete.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> uploadFileAsync(String contentPath, Long timeout) {
        return uploadFileWithResponseAsync(contentPath, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative
     * to the root of the image store.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImageStoreContent>> getImageStoreContentWithResponseAsync(String contentPath, Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreContent(this.getHost(), this.getApiVersion(), contentPath, timeout, accept);
    }

    /**
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative
     * to the root of the image store.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the image store content on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageStoreContent> getImageStoreContentAsync(String contentPath, Long timeout) {
        return getImageStoreContentWithResponseAsync(contentPath, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Deletes existing image store content being found within the given image store relative path. This command can be
     * used to delete uploaded application packages once they are provisioned.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreContentWithResponseAsync(String contentPath, Long timeout) {
        final String accept = "application/json";
        return service.deleteImageStoreContent(this.getHost(), this.getApiVersion(), contentPath, timeout, accept);
    }

    /**
     * Deletes existing image store content being found within the given image store relative path. This command can be
     * used to delete uploaded application packages once they are provisioned.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteImageStoreContentAsync(String contentPath, Long timeout) {
        return deleteImageStoreContentWithResponseAsync(contentPath, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the information about the image store content at the root of the image store.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the image store content along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImageStoreContent>> getImageStoreRootContentWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreRootContent(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns the information about the image store content at the root of the image store.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the image store content on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageStoreContent> getImageStoreRootContentAsync(Long timeout) {
        return getImageStoreRootContentWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Copies the image store content from the source image store relative path to the destination image store relative
     * path.
     *
     * @param imageStoreCopyDescription Describes the copy description for the image store.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> copyImageStoreContentWithResponseAsync(
            ImageStoreCopyDescription imageStoreCopyDescription, Long timeout) {
        final String accept = "application/json";
        return service.copyImageStoreContent(
                this.getHost(), this.getApiVersion(), timeout, imageStoreCopyDescription, accept);
    }

    /**
     * Copies the image store content from the source image store relative path to the destination image store relative
     * path.
     *
     * @param imageStoreCopyDescription Describes the copy description for the image store.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyImageStoreContentAsync(ImageStoreCopyDescription imageStoreCopyDescription, Long timeout) {
        return copyImageStoreContentWithResponseAsync(imageStoreCopyDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file
     * chunks.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteImageStoreUploadSessionWithResponseAsync(UUID sessionId, Long timeout) {
        final String accept = "application/json";
        return service.deleteImageStoreUploadSession(this.getHost(), this.getApiVersion(), sessionId, timeout, accept);
    }

    /**
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file
     * chunks.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteImageStoreUploadSessionAsync(UUID sessionId, Long timeout) {
        return deleteImageStoreUploadSessionWithResponseAsync(sessionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
     * upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
     * chunk received.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> commitImageStoreUploadSessionWithResponseAsync(UUID sessionId, Long timeout) {
        final String accept = "application/json";
        return service.commitImageStoreUploadSession(this.getHost(), this.getApiVersion(), sessionId, timeout, accept);
    }

    /**
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the
     * upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last
     * chunk received.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> commitImageStoreUploadSessionAsync(UUID sessionId, Long timeout) {
        return commitImageStoreUploadSessionWithResponseAsync(sessionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time
     * during uploading.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the image store upload session identified by the given ID along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UploadSession>> getImageStoreUploadSessionByIdWithResponseAsync(UUID sessionId, Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreUploadSessionById(this.getHost(), this.getApiVersion(), sessionId, timeout, accept);
    }

    /**
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time
     * during uploading.
     *
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the image store upload session identified by the given ID on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UploadSession> getImageStoreUploadSessionByIdAsync(UUID sessionId, Long timeout) {
        return getImageStoreUploadSessionByIdWithResponseAsync(sessionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the image store upload session associated with the given image store relative path. User can query the
     * upload session at any time during uploading.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the image store upload session associated with the given image store relative path along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UploadSession>> getImageStoreUploadSessionByPathWithResponseAsync(
            String contentPath, Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreUploadSessionByPath(
                this.getHost(), this.getApiVersion(), contentPath, timeout, accept);
    }

    /**
     * Gets the image store upload session associated with the given image store relative path. User can query the
     * upload session at any time during uploading.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the image store upload session associated with the given image store relative path on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UploadSession> getImageStoreUploadSessionByPathAsync(String contentPath, Long timeout) {
        return getImageStoreUploadSessionByPathWithResponseAsync(contentPath, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
     * API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
     * whenever there is a network interruption. Use this option if the file size is large.
     *
     * <p>To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks
     * to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image
     * store relative path already exists, it will be overwritten when the upload session commits.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param contentRange When uploading file chunks to the image store, the Content-Range header field need to be
     *     configured and sent with a request. The format should looks like "bytes
     *     {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000
     *     indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadFileChunkWithResponseAsync(
            String contentPath, UUID sessionId, String contentRange, Long timeout) {
        final String accept = "application/json";
        return service.uploadFileChunk(
                this.getHost(), this.getApiVersion(), contentPath, sessionId, contentRange, timeout, accept);
    }

    /**
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This
     * API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch
     * whenever there is a network interruption. Use this option if the file size is large.
     *
     * <p>To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks
     * to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image
     * store relative path already exists, it will be overwritten when the upload session commits.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session
     *     which keeps track of all file chunks until it is committed.
     * @param contentRange When uploading file chunks to the image store, the Content-Range header field need to be
     *     configured and sent with a request. The format should looks like "bytes
     *     {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes 300-5000/20000
     *     indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> uploadFileChunkAsync(String contentPath, UUID sessionId, String contentRange, Long timeout) {
        return uploadFileChunkWithResponseAsync(contentPath, sessionId, contentRange, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns the total size of files at the root and children folders in image store.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of a image store folder size along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FolderSizeInfo>> getImageStoreRootFolderSizeWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreRootFolderSize(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns the total size of files at the root and children folders in image store.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of a image store folder size on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FolderSizeInfo> getImageStoreRootFolderSizeAsync(Long timeout) {
        return getImageStoreRootFolderSizeWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
     * the root of the image store.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the total size of file under a image store folder, specified by contentPath along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FolderSizeInfo>> getImageStoreFolderSizeWithResponseAsync(String contentPath, Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreFolderSize(this.getHost(), this.getApiVersion(), contentPath, timeout, accept);
    }

    /**
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to
     * the root of the image store.
     *
     * @param contentPath Relative path to file or folder in the image store from its root.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the total size of file under a image store folder, specified by contentPath on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FolderSizeInfo> getImageStoreFolderSizeAsync(String contentPath, Long timeout) {
        return getImageStoreFolderSizeWithResponseAsync(contentPath, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
     * node it is on, and several categories of the ImageStore's file system usage.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the ImageStore's resource usage along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ImageStoreInfo>> getImageStoreInfoWithResponseAsync(Long timeout) {
        final String accept = "application/json";
        return service.getImageStoreInfo(this.getHost(), this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the
     * node it is on, and several categories of the ImageStore's file system usage.
     *
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the ImageStore's resource usage on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageStoreInfo> getImageStoreInfoAsync(Long timeout) {
        return getImageStoreInfoWithResponseAsync(timeout).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific commands to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param command The text of the command to be invoked. The content of the command is infrastructure-specific.
     * @param serviceId The identity of the infrastructure service. This is the full name of the infrastructure service
     *     without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
     *     instance of infrastructure service running.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<String>> invokeInfrastructureCommandWithResponseAsync(
            String command, String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.invokeInfrastructureCommand(
                this.getHost(), this.getApiVersion(), command, serviceId, timeout, accept);
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific commands to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param command The text of the command to be invoked. The content of the command is infrastructure-specific.
     * @param serviceId The identity of the infrastructure service. This is the full name of the infrastructure service
     *     without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
     *     instance of infrastructure service running.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is a weakly-typed response stream to the client on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> invokeInfrastructureCommandAsync(String command, String serviceId, Long timeout) {
        return invokeInfrastructureCommandWithResponseAsync(command, serviceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific queries to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param command The text of the command to be invoked. The content of the command is infrastructure-specific.
     * @param serviceId The identity of the infrastructure service. This is the full name of the infrastructure service
     *     without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
     *     instance of infrastructure service running.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is a weakly-typed response stream to the client along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<String>> invokeInfrastructureQueryWithResponseAsync(
            String command, String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.invokeInfrastructureQuery(
                this.getHost(), this.getApiVersion(), command, serviceId, timeout, accept);
    }

    /**
     * For clusters that have one or more instances of the Infrastructure Service configured, this API provides a way to
     * send infrastructure-specific queries to a particular instance of the Infrastructure Service.
     *
     * <p>Available commands and their corresponding response formats vary depending upon the infrastructure on which
     * the cluster is running.
     *
     * <p>This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @param command The text of the command to be invoked. The content of the command is infrastructure-specific.
     * @param serviceId The identity of the infrastructure service. This is the full name of the infrastructure service
     *     without the 'fabric:' URI scheme. This parameter required only for the cluster that has more than one
     *     instance of infrastructure service running.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is a weakly-typed response stream to the client on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> invokeInfrastructureQueryAsync(String command, String serviceId, Long timeout) {
        return invokeInfrastructureQueryWithResponseAsync(command, serviceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
     * partition. Actual data loss will depend on the specified DataLossMode.
     *
     * <p>- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but
     * actual data loss depends on the presence of in-flight replication. - FullDataLoss - All replicas are removed
     * hence all data is lost and OnDataLoss is triggered.
     *
     * <p>This API should only be called with a stateful service as the target.
     *
     * <p>Calling this API with a system service as the target is not advised.
     *
     * <p>Note: Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution
     * and clean up internal system state. It will not restore data if the command has progressed far enough to cause
     * data loss.
     *
     * <p>Call the GetDataLossProgress API with the same OperationId to return information on the operation started with
     * this API.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startDataLossWithResponseAsync(
            String serviceId, UUID partitionId, UUID operationId, DataLossMode dataLossMode, Long timeout) {
        final String accept = "application/json";
        return service.startDataLoss(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionId,
                operationId,
                dataLossMode,
                timeout,
                accept);
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the
     * partition. Actual data loss will depend on the specified DataLossMode.
     *
     * <p>- PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but
     * actual data loss depends on the presence of in-flight replication. - FullDataLoss - All replicas are removed
     * hence all data is lost and OnDataLoss is triggered.
     *
     * <p>This API should only be called with a stateful service as the target.
     *
     * <p>Calling this API with a system service as the target is not advised.
     *
     * <p>Note: Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution
     * and clean up internal system state. It will not restore data if the command has progressed far enough to cause
     * data loss.
     *
     * <p>Call the GetDataLossProgress API with the same OperationId to return information on the operation started with
     * this API.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data loss to induce.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startDataLossAsync(
            String serviceId, UUID partitionId, UUID operationId, DataLossMode dataLossMode, Long timeout) {
        return startDataLossWithResponseAsync(serviceId, partitionId, operationId, dataLossMode, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a data loss operation started with StartDataLoss, using the OperationId along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionDataLossProgress>> getDataLossProgressWithResponseAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        final String accept = "application/json";
        return service.getDataLossProgress(
                this.getHost(), this.getApiVersion(), serviceId, partitionId, operationId, timeout, accept);
    }

    /**
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a data loss operation started with StartDataLoss, using the OperationId on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionDataLossProgress> getDataLossProgressAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        return getDataLossProgressWithResponseAsync(serviceId, partitionId, operationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API is useful for a temporary quorum loss situation on your service.
     *
     * <p>Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started
     * with this API.
     *
     * <p>This can only be called on stateful persisted (HasPersistedState==true) services. Do not use this API on
     * stateless services or stateful in-memory only services.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to
     *     induce.
     * @param quorumLossDuration The amount of time for which the partition will be kept in quorum loss. This must be
     *     specified in seconds.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startQuorumLossWithResponseAsync(
            String serviceId,
            UUID partitionId,
            UUID operationId,
            QuorumLossMode quorumLossMode,
            int quorumLossDuration,
            Long timeout) {
        final String accept = "application/json";
        return service.startQuorumLoss(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionId,
                operationId,
                quorumLossMode,
                quorumLossDuration,
                timeout,
                accept);
    }

    /**
     * This API is useful for a temporary quorum loss situation on your service.
     *
     * <p>Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started
     * with this API.
     *
     * <p>This can only be called on stateful persisted (HasPersistedState==true) services. Do not use this API on
     * stateless services or stateful in-memory only services.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to
     *     induce.
     * @param quorumLossDuration The amount of time for which the partition will be kept in quorum loss. This must be
     *     specified in seconds.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startQuorumLossAsync(
            String serviceId,
            UUID partitionId,
            UUID operationId,
            QuorumLossMode quorumLossMode,
            int quorumLossDuration,
            Long timeout) {
        return startQuorumLossWithResponseAsync(
                        serviceId, partitionId, operationId, quorumLossMode, quorumLossDuration, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionQuorumLossProgress>> getQuorumLossProgressWithResponseAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        final String accept = "application/json";
        return service.getQuorumLossProgress(
                this.getHost(), this.getApiVersion(), serviceId, partitionId, operationId, timeout, accept);
    }

    /**
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionQuorumLossProgress> getQuorumLossProgressAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        return getQuorumLossProgressWithResponseAsync(serviceId, partitionId, operationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This API is useful for testing failover.
     *
     * <p>If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
     *
     * <p>Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param restartPartitionMode Describe which partitions to restart.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startPartitionRestartWithResponseAsync(
            String serviceId,
            UUID partitionId,
            UUID operationId,
            RestartPartitionMode restartPartitionMode,
            Long timeout) {
        final String accept = "application/json";
        return service.startPartitionRestart(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                partitionId,
                operationId,
                restartPartitionMode,
                timeout,
                accept);
    }

    /**
     * This API is useful for testing failover.
     *
     * <p>If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.
     *
     * <p>Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param restartPartitionMode Describe which partitions to restart.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startPartitionRestartAsync(
            String serviceId,
            UUID partitionId,
            UUID operationId,
            RestartPartitionMode restartPartitionMode,
            Long timeout) {
        return startPartitionRestartWithResponseAsync(
                        serviceId, partitionId, operationId, restartPartitionMode, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionRestartProgress>> getPartitionRestartProgressWithResponseAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionRestartProgress(
                this.getHost(), this.getApiVersion(), serviceId, partitionId, operationId, timeout, accept);
    }

    /**
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param partitionId The identity of the partition.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionRestartProgress> getPartitionRestartProgressAsync(
            String serviceId, UUID partitionId, UUID operationId, Long timeout) {
        return getPartitionRestartProgressWithResponseAsync(serviceId, partitionId, operationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Starts or stops a cluster node. A cluster node is a process, not the OS instance itself. To start a node, pass in
     * "Start" for the NodeTransitionType parameter. To stop a node, pass in "Stop" for the NodeTransitionType
     * parameter. This API starts the operation - when the API returns the node may not have finished transitioning yet.
     * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
     *
     * @param nodeName The name of the node.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param nodeTransitionType Indicates the type of transition to perform. NodeTransitionType.Start will start a
     *     stopped node. NodeTransitionType.Stop will stop a node that is up.
     * @param nodeInstanceId The node instance ID of the target node. This can be determined through GetNodeInfo API.
     * @param stopDurationInSeconds The duration, in seconds, to keep the node stopped. The minimum value is 600, the
     *     maximum is 14400. After this time expires, the node will automatically come back up.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startNodeTransitionWithResponseAsync(
            String nodeName,
            UUID operationId,
            NodeTransitionType nodeTransitionType,
            String nodeInstanceId,
            int stopDurationInSeconds,
            Long timeout) {
        final String accept = "application/json";
        return service.startNodeTransition(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                operationId,
                nodeTransitionType,
                nodeInstanceId,
                stopDurationInSeconds,
                timeout,
                accept);
    }

    /**
     * Starts or stops a cluster node. A cluster node is a process, not the OS instance itself. To start a node, pass in
     * "Start" for the NodeTransitionType parameter. To stop a node, pass in "Stop" for the NodeTransitionType
     * parameter. This API starts the operation - when the API returns the node may not have finished transitioning yet.
     * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
     *
     * @param nodeName The name of the node.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param nodeTransitionType Indicates the type of transition to perform. NodeTransitionType.Start will start a
     *     stopped node. NodeTransitionType.Stop will stop a node that is up.
     * @param nodeInstanceId The node instance ID of the target node. This can be determined through GetNodeInfo API.
     * @param stopDurationInSeconds The duration, in seconds, to keep the node stopped. The minimum value is 600, the
     *     maximum is 14400. After this time expires, the node will automatically come back up.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startNodeTransitionAsync(
            String nodeName,
            UUID operationId,
            NodeTransitionType nodeTransitionType,
            String nodeInstanceId,
            int stopDurationInSeconds,
            Long timeout) {
        return startNodeTransitionWithResponseAsync(
                        nodeName, operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
     *
     * @param nodeName The name of the node.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of an operation started with StartNodeTransition using the provided OperationId along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NodeTransitionProgress>> getNodeTransitionProgressWithResponseAsync(
            String nodeName, UUID operationId, Long timeout) {
        final String accept = "application/json";
        return service.getNodeTransitionProgress(
                this.getHost(), this.getApiVersion(), nodeName, operationId, timeout, accept);
    }

    /**
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId.
     *
     * @param nodeName The name of the node.
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the progress of an operation started with StartNodeTransition using the provided OperationId on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NodeTransitionProgress> getNodeTransitionProgressAsync(
            String nodeName, UUID operationId, Long timeout) {
        return getNodeTransitionProgressWithResponseAsync(nodeName, operationId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list of user-induced fault operations filtered by provided input.
     *
     * @param typeFilter Used to filter on OperationType for user-induced operations.
     *     <p>- 65535 - select all - 1 - select PartitionDataLoss. - 2 - select PartitionQuorumLoss. - 4 - select
     *     PartitionRestart. - 8 - select NodeTransition.
     * @param stateFilter Used to filter on OperationState's for user-induced operations.
     *     <p>- 65535 - select All - 1 - select Running - 2 - select RollingBack - 8 - select Completed - 16 - select
     *     Faulted - 32 - select Cancelled - 64 - select ForceCancelled.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of user-induced fault operations filtered by provided input along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<OperationStatus>>> getFaultOperationListWithResponseAsync(
            int typeFilter, int stateFilter, Long timeout) {
        final String accept = "application/json";
        return service.getFaultOperationList(
                this.getHost(), this.getApiVersion(), typeFilter, stateFilter, timeout, accept);
    }

    /**
     * Gets the list of user-induced fault operations filtered by provided input.
     *
     * @param typeFilter Used to filter on OperationType for user-induced operations.
     *     <p>- 65535 - select all - 1 - select PartitionDataLoss. - 2 - select PartitionQuorumLoss. - 4 - select
     *     PartitionRestart. - 8 - select NodeTransition.
     * @param stateFilter Used to filter on OperationState's for user-induced operations.
     *     <p>- 65535 - select All - 1 - select Running - 2 - select RollingBack - 8 - select Completed - 16 - select
     *     Faulted - 32 - select Cancelled - 64 - select ForceCancelled.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of user-induced fault operations filtered by provided input on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<OperationStatus>> getFaultOperationListAsync(int typeFilter, int stateFilter, Long timeout) {
        return getFaultOperationListWithResponseAsync(typeFilter, stateFilter, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
     * StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
     *
     * <p>If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up. If
     * force is true, the command will be aborted, and some internal state may be left behind. Specifying force as true
     * should be used with care. Calling this API with force set to true is not allowed until this API has already been
     * called on the same test command with force set to false first, or unless the test command already has an
     * OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system
     * will be/is cleaning up internal system state caused by executing the command. It will not restore data if the
     * test command was to cause data loss. For example, if you call StartDataLoss then call this API, the system will
     * only clean up internal state from running the command. It will not restore the target partition's data, if the
     * command progressed far enough to cause data loss.
     *
     * <p>Important note: if this API is invoked with force==true, internal state may be left behind.
     *
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param force Indicates whether to gracefully roll back and clean up internal system state modified by executing
     *     the user-induced operation.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(UUID operationId, boolean force, Long timeout) {
        final String accept = "application/json";
        return service.cancelOperation(this.getHost(), this.getApiVersion(), operationId, force, timeout, accept);
    }

    /**
     * The following APIs start fault operations that may be cancelled by using CancelOperation: StartDataLoss,
     * StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
     *
     * <p>If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up. If
     * force is true, the command will be aborted, and some internal state may be left behind. Specifying force as true
     * should be used with care. Calling this API with force set to true is not allowed until this API has already been
     * called on the same test command with force set to false first, or unless the test command already has an
     * OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system
     * will be/is cleaning up internal system state caused by executing the command. It will not restore data if the
     * test command was to cause data loss. For example, if you call StartDataLoss then call this API, the system will
     * only clean up internal state from running the command. It will not restore the target partition's data, if the
     * command progressed far enough to cause data loss.
     *
     * <p>Important note: if this API is invoked with force==true, internal state may be left behind.
     *
     * @param operationId A GUID that identifies a call of this API. This is passed into the corresponding GetProgress
     *     API.
     * @param force Indicates whether to gracefully roll back and clean up internal system state modified by executing
     *     the user-induced operation.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(UUID operationId, boolean force, Long timeout) {
        return cancelOperationWithResponseAsync(operationId, force, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition
     * for periodic backup.
     *
     * @param backupPolicyDescription Describes the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param validateConnection Specifies whether to validate the storage connection and credentials before creating or
     *     updating the backup policies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createBackupPolicyWithResponseAsync(
            BackupPolicyDescription backupPolicyDescription, Long timeout, Boolean validateConnection) {
        final String accept = "application/json";
        return service.createBackupPolicy(
                this.getHost(), this.getApiVersion(), timeout, validateConnection, backupPolicyDescription, accept);
    }

    /**
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition
     * for periodic backup.
     *
     * @param backupPolicyDescription Describes the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param validateConnection Specifies whether to validate the storage connection and credentials before creating or
     *     updating the backup policies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createBackupPolicyAsync(
            BackupPolicyDescription backupPolicyDescription, Long timeout, Boolean validateConnection) {
        return createBackupPolicyWithResponseAsync(backupPolicyDescription, timeout, validateConnection)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
     * backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
     * first deleting the mapping.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupPolicyWithResponseAsync(String backupPolicyName, Long timeout) {
        final String accept = "application/json";
        return service.deleteBackupPolicy(this.getHost(), backupPolicyName, this.getApiVersion(), timeout, accept);
    }

    /**
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active
     * backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without
     * first deleting the mapping.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBackupPolicyAsync(String backupPolicyName, Long timeout) {
        return deleteBackupPolicyWithResponseAsync(backupPolicyName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Get a list of all the backup policies configured.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the backup policies configured along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupPolicyDescriptionList>> getBackupPolicyListWithResponseAsync(
            String continuationToken, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getBackupPolicyList(
                this.getHost(), this.getApiVersion(), continuationToken, maxResults, timeout, accept);
    }

    /**
     * Get a list of all the backup policies configured.
     *
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the backup policies configured on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupPolicyDescriptionList> getBackupPolicyListAsync(
            String continuationToken, Long maxResults, Long timeout) {
        return getBackupPolicyListWithResponseAsync(continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a particular backup policy identified by {backupPolicyName}.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a particular backup policy identified by {backupPolicyName} along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BackupPolicyDescription>> getBackupPolicyByNameWithResponseAsync(
            String backupPolicyName, Long timeout) {
        final String accept = "application/json";
        return service.getBackupPolicyByName(this.getHost(), backupPolicyName, this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets a particular backup policy identified by {backupPolicyName}.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a particular backup policy identified by {backupPolicyName} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupPolicyDescription> getBackupPolicyByNameAsync(String backupPolicyName, Long timeout) {
        return getBackupPolicyByNameWithResponseAsync(backupPolicyName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backup entities that are being periodically backed along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupEntityList>> getAllEntitiesBackedUpByPolicyWithResponseAsync(
            String backupPolicyName, String continuationToken, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getAllEntitiesBackedUpByPolicy(
                this.getHost(), backupPolicyName, this.getApiVersion(), continuationToken, maxResults, timeout, accept);
    }

    /**
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backup entities that are being periodically backed on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupEntityList> getAllEntitiesBackedUpByPolicyAsync(
            String backupPolicyName, String continuationToken, Long maxResults, Long timeout) {
        return getAllEntitiesBackedUpByPolicyWithResponseAsync(backupPolicyName, continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the backup policy identified by {backupPolicyName}.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param backupPolicyDescription Describes the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param validateConnection Specifies whether to validate the storage connection and credentials before creating or
     *     updating the backup policies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateBackupPolicyWithResponseAsync(
            String backupPolicyName,
            BackupPolicyDescription backupPolicyDescription,
            Long timeout,
            Boolean validateConnection) {
        final String accept = "application/json";
        return service.updateBackupPolicy(
                this.getHost(),
                backupPolicyName,
                this.getApiVersion(),
                timeout,
                validateConnection,
                backupPolicyDescription,
                accept);
    }

    /**
     * Updates the backup policy identified by {backupPolicyName}.
     *
     * @param backupPolicyName The name of the backup policy.
     * @param backupPolicyDescription Describes the backup policy.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param validateConnection Specifies whether to validate the storage connection and credentials before creating or
     *     updating the backup policies.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateBackupPolicyAsync(
            String backupPolicyName,
            BackupPolicyDescription backupPolicyDescription,
            Long timeout,
            Boolean validateConnection) {
        return updateBackupPolicyWithResponseAsync(
                        backupPolicyName, backupPolicyDescription, timeout, validateConnection)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition
     * is backed up individually as per the specified backup policy description. Note only C# based Reliable Actor and
     * Reliable Stateful services are currently supported for periodic backup.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableApplicationBackupWithResponseAsync(
            String applicationId, EnableBackupDescription enableBackupDescription, Long timeout) {
        final String accept = "application/json";
        return service.enableApplicationBackup(
                this.getHost(), applicationId, this.getApiVersion(), timeout, enableBackupDescription, accept);
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition
     * is backed up individually as per the specified backup policy description. Note only C# based Reliable Actor and
     * Reliable Stateful services are currently supported for periodic backup.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> enableApplicationBackupAsync(
            String applicationId, EnableBackupDescription enableBackupDescription, Long timeout) {
        return enableApplicationBackupWithResponseAsync(applicationId, enableBackupDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableApplicationBackupWithResponseAsync(
            String applicationId, Long timeout, DisableBackupDescription disableBackupDescription) {
        final String accept = "application/json";
        return service.disableApplicationBackup(
                this.getHost(), applicationId, this.getApiVersion(), timeout, disableBackupDescription, accept);
    }

    /**
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableApplicationBackupAsync(
            String applicationId, Long timeout, DisableBackupDescription disableBackupDescription) {
        return disableApplicationBackupWithResponseAsync(applicationId, timeout, disableBackupDescription)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the Service Fabric backup configuration information for the application and the services and partitions
     * under this application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric backup configuration information for the application and the services and partitions
     *     under this application along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupConfigurationInfoList>> getApplicationBackupConfigurationInfoWithResponseAsync(
            String applicationId, String continuationToken, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getApplicationBackupConfigurationInfo(
                this.getHost(), applicationId, this.getApiVersion(), continuationToken, maxResults, timeout, accept);
    }

    /**
     * Gets the Service Fabric backup configuration information for the application and the services and partitions
     * under this application.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric backup configuration information for the application and the services and partitions
     *     under this application on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupConfigurationInfoList> getApplicationBackupConfigurationInfoAsync(
            String applicationId, String continuationToken, Long maxResults, Long timeout) {
        return getApplicationBackupConfigurationInfoWithResponseAsync(
                        applicationId, continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
     * all the backups available at the backup location configured in the backup policy. It also allows filtering of the
     * result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupInfoList>> getApplicationBackupListWithResponseAsync(
            String applicationId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter,
            String continuationToken,
            Long maxResults) {
        final String accept = "application/json";
        return service.getApplicationBackupList(
                this.getHost(),
                applicationId,
                this.getApiVersion(),
                timeout,
                latest,
                startDateTimeFilter,
                endDateTimeFilter,
                continuationToken,
                maxResults,
                accept);
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates
     * all the backups available at the backup location configured in the backup policy. It also allows filtering of the
     * result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupInfoList> getApplicationBackupListAsync(
            String applicationId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter,
            String continuationToken,
            Long maxResults) {
        return getApplicationBackupListWithResponseAsync(
                        applicationId,
                        timeout,
                        latest,
                        startDateTimeFilter,
                        endDateTimeFilter,
                        continuationToken,
                        maxResults)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire application's hierarchy. It means all the services and
     * partitions under this application are now suspended for backup.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendApplicationBackupWithResponseAsync(String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.suspendApplicationBackup(this.getHost(), applicationId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire application's hierarchy. It means all the services and
     * partitions under this application are now suspended for backup.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> suspendApplicationBackupAsync(String applicationId, Long timeout) {
        return suspendApplicationBackupWithResponseAsync(applicationId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
     * currently configured for the same.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeApplicationBackupWithResponseAsync(String applicationId, Long timeout) {
        final String accept = "application/json";
        return service.resumeApplicationBackup(this.getHost(), applicationId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy
     * currently configured for the same.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeApplicationBackupAsync(String applicationId, Long timeout) {
        return resumeApplicationBackupWithResponseAsync(applicationId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
     * backed up individually as per the specified backup policy description. In case the application, which the service
     * is part of, is already enabled for backup then this operation would override the policy being used to take the
     * periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note
     * only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enableServiceBackupWithResponseAsync(
            String serviceId, EnableBackupDescription enableBackupDescription, Long timeout) {
        final String accept = "application/json";
        return service.enableServiceBackup(
                this.getHost(), serviceId, this.getApiVersion(), timeout, enableBackupDescription, accept);
    }

    /**
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is
     * backed up individually as per the specified backup policy description. In case the application, which the service
     * is part of, is already enabled for backup then this operation would override the policy being used to take the
     * periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note
     * only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> enableServiceBackupAsync(
            String serviceId, EnableBackupDescription enableBackupDescription, Long timeout) {
        return enableServiceBackupWithResponseAsync(serviceId, enableBackupDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly
     * enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this
     * service is part of, this service would continue to be periodically backed up as per the policy mapped at the
     * application level.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableServiceBackupWithResponseAsync(
            String serviceId, Long timeout, DisableBackupDescription disableBackupDescription) {
        final String accept = "application/json";
        return service.disableServiceBackup(
                this.getHost(), serviceId, this.getApiVersion(), timeout, disableBackupDescription, accept);
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly
     * enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this
     * service is part of, this service would continue to be periodically backed up as per the policy mapped at the
     * application level.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableServiceBackupAsync(
            String serviceId, Long timeout, DisableBackupDescription disableBackupDescription) {
        return disableServiceBackupWithResponseAsync(serviceId, timeout, disableBackupDescription)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric backup configuration information for the service and the partitions under this service
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupConfigurationInfoList>> getServiceBackupConfigurationInfoWithResponseAsync(
            String serviceId, String continuationToken, Long maxResults, Long timeout) {
        final String accept = "application/json";
        return service.getServiceBackupConfigurationInfo(
                this.getHost(), serviceId, this.getApiVersion(), continuationToken, maxResults, timeout, accept);
    }

    /**
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric backup configuration information for the service and the partitions under this service
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupConfigurationInfoList> getServiceBackupConfigurationInfoAsync(
            String serviceId, String continuationToken, Long maxResults, Long timeout) {
        return getServiceBackupConfigurationInfoWithResponseAsync(serviceId, continuationToken, maxResults, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
     * the backups available in the backup store configured in the backup policy. It also allows filtering of the result
     * based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupInfoList>> getServiceBackupListWithResponseAsync(
            String serviceId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter,
            String continuationToken,
            Long maxResults) {
        final String accept = "application/json";
        return service.getServiceBackupList(
                this.getHost(),
                serviceId,
                this.getApiVersion(),
                timeout,
                latest,
                startDateTimeFilter,
                endDateTimeFilter,
                continuationToken,
                maxResults,
                accept);
    }

    /**
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all
     * the backups available in the backup store configured in the backup policy. It also allows filtering of the result
     * based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupInfoList> getServiceBackupListAsync(
            String serviceId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter,
            String continuationToken,
            Long maxResults) {
        return getServiceBackupListWithResponseAsync(
                        serviceId,
                        timeout,
                        latest,
                        startDateTimeFilter,
                        endDateTimeFilter,
                        continuationToken,
                        maxResults)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
     * service are now suspended for backup.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendServiceBackupWithResponseAsync(String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.suspendServiceBackup(this.getHost(), serviceId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again. This operation applies to the entire service's hierarchy. It means all the partitions under this
     * service are now suspended for backup.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> suspendServiceBackupAsync(String serviceId, Long timeout) {
        return suspendServiceBackupWithResponseAsync(serviceId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
     * configured for the same.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeServiceBackupWithResponseAsync(String serviceId, Long timeout) {
        final String accept = "application/json";
        return service.resumeServiceBackup(this.getHost(), serviceId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently
     * configured for the same.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeServiceBackupAsync(String serviceId, Long timeout) {
        return resumeServiceBackupWithResponseAsync(serviceId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
     * policy description. In case the application or service, which is partition is part of, is already enabled for
     * backup then this operation would override the policy being used to take the periodic backup of this partition.
     * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @param partitionId The identity of the partition.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> enablePartitionBackupWithResponseAsync(
            UUID partitionId, EnableBackupDescription enableBackupDescription, Long timeout) {
        final String accept = "application/json";
        return service.enablePartitionBackup(
                this.getHost(), partitionId, this.getApiVersion(), timeout, enableBackupDescription, accept);
    }

    /**
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup
     * policy description. In case the application or service, which is partition is part of, is already enabled for
     * backup then this operation would override the policy being used to take the periodic backup of this partition.
     * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @param partitionId The identity of the partition.
     * @param enableBackupDescription Specifies the parameters for enabling backup.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> enablePartitionBackupAsync(
            UUID partitionId, EnableBackupDescription enableBackupDescription, Long timeout) {
        return enablePartitionBackupWithResponseAsync(partitionId, enableBackupDescription, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it
     * can be disabled. In case the backup is enabled for the Service Fabric application or service, which this
     * partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the
     * higher level entity.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disablePartitionBackupWithResponseAsync(
            UUID partitionId, Long timeout, DisableBackupDescription disableBackupDescription) {
        final String accept = "application/json";
        return service.disablePartitionBackup(
                this.getHost(), partitionId, this.getApiVersion(), timeout, disableBackupDescription, accept);
    }

    /**
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it
     * can be disabled. In case the backup is enabled for the Service Fabric application or service, which this
     * partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the
     * higher level entity.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disablePartitionBackupAsync(
            UUID partitionId, Long timeout, DisableBackupDescription disableBackupDescription) {
        return disablePartitionBackupWithResponseAsync(partitionId, timeout, disableBackupDescription)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric Backup configuration information for the specified partition along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PartitionBackupConfigurationInfo>> getPartitionBackupConfigurationInfoWithResponseAsync(
            UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionBackupConfigurationInfo(
                this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Service Fabric Backup configuration information for the specified partition on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PartitionBackupConfigurationInfo> getPartitionBackupConfigurationInfoAsync(
            UUID partitionId, Long timeout) {
        return getPartitionBackupConfigurationInfoWithResponseAsync(partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available
     * in the backup store configured in the backup policy. It also allows filtering of the result based on start and
     * end datetime or just fetching the latest available backup for the partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupInfoList>> getPartitionBackupListWithResponseAsync(
            UUID partitionId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter) {
        final String accept = "application/json";
        return service.getPartitionBackupList(
                this.getHost(),
                partitionId,
                this.getApiVersion(),
                timeout,
                latest,
                startDateTimeFilter,
                endDateTimeFilter,
                accept);
    }

    /**
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available
     * in the backup store configured in the backup policy. It also allows filtering of the result based on start and
     * end datetime or just fetching the latest available backup for the partition.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified
     *     time range.
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The
     *     date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups
     *     from the beginning are enumerated.
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date
     *     time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is
     *     done till the most recent backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupInfoList> getPartitionBackupListAsync(
            UUID partitionId,
            Long timeout,
            Boolean latest,
            OffsetDateTime startDateTimeFilter,
            OffsetDateTime endDateTimeFilter) {
        return getPartitionBackupListWithResponseAsync(
                        partitionId, timeout, latest, startDateTimeFilter, endDateTimeFilter)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> suspendPartitionBackupWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.suspendPartitionBackup(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is
     * resumed again.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> suspendPartitionBackupAsync(UUID partitionId, Long timeout) {
        return suspendPartitionBackupWithResponseAsync(partitionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured
     * for the same.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumePartitionBackupWithResponseAsync(UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.resumePartitionBackup(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured
     * for the same.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumePartitionBackupAsync(UUID partitionId, Long timeout) {
        return resumePartitionBackupWithResponseAsync(partitionId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
     * backed up, then by default the new backup is created at the same backup storage. One can also override the same
     * by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress
     * can be tracked using the GetBackupProgress operation. In case, the operation times out, specify a greater backup
     * timeout value in the query parameter.
     *
     * @param partitionId The identity of the partition.
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to
     *     complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be
     *     that though the operation returns back timeout, the backup actually goes through. In case of timeout error,
     *     its recommended to invoke this operation again with a greater timeout value. The default value for the same
     *     is 10 minutes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup
     *     operation uses default parameters from the backup policy current associated with this partition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> backupPartitionWithResponseAsync(
            UUID partitionId,
            Integer backupTimeout,
            Long timeout,
            BackupPartitionDescription backupPartitionDescription) {
        final String accept = "application/json";
        return service.backupPartition(
                this.getHost(),
                partitionId,
                backupTimeout,
                this.getApiVersion(),
                timeout,
                backupPartitionDescription,
                accept);
    }

    /**
     * Creates a backup of the stateful persisted partition's state. In case the partition is already being periodically
     * backed up, then by default the new backup is created at the same backup storage. One can also override the same
     * by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress
     * can be tracked using the GetBackupProgress operation. In case, the operation times out, specify a greater backup
     * timeout value in the query parameter.
     *
     * @param partitionId The identity of the partition.
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to
     *     complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be
     *     that though the operation returns back timeout, the backup actually goes through. In case of timeout error,
     *     its recommended to invoke this operation again with a greater timeout value. The default value for the same
     *     is 10 minutes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup
     *     operation uses default parameters from the backup policy current associated with this partition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> backupPartitionAsync(
            UUID partitionId,
            Integer backupTimeout,
            Long timeout,
            BackupPartitionDescription backupPartitionDescription) {
        return backupPartitionWithResponseAsync(partitionId, backupTimeout, timeout, backupPartitionDescription)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns information about the state of the latest backup along with details or failure reason in case of
     * completion.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the progress of a partition's backup along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BackupProgressInfo>> getPartitionBackupProgressWithResponseAsync(
            UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionBackupProgress(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns information about the state of the latest backup along with details or failure reason in case of
     * completion.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the progress of a partition's backup on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupProgressInfo> getPartitionBackupProgressAsync(UUID partitionId, Long timeout) {
        return getPartitionBackupProgressWithResponseAsync(partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the
     * partition is already being periodically backed up, then by default the backup point is looked for in the storage
     * specified in backup policy. One can also override the same by specifying the backup storage details as part of
     * the restore partition description in body. Once the restore is initiated, its progress can be tracked using the
     * GetRestoreProgress operation. In case, the operation times out, specify a greater restore timeout value in the
     * query parameter.
     *
     * @param partitionId The identity of the partition.
     * @param restorePartitionDescription Describes the parameters to restore the partition.
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to
     *     complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could
     *     be that the restore operation goes through even though it completes with timeout. In case of timeout error,
     *     its recommended to invoke this operation again with a greater timeout value. the default value for the same
     *     is 10 minutes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restorePartitionWithResponseAsync(
            UUID partitionId,
            RestorePartitionDescription restorePartitionDescription,
            Integer restoreTimeout,
            Long timeout) {
        final String accept = "application/json";
        return service.restorePartition(
                this.getHost(),
                partitionId,
                restoreTimeout,
                this.getApiVersion(),
                timeout,
                restorePartitionDescription,
                accept);
    }

    /**
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the
     * partition is already being periodically backed up, then by default the backup point is looked for in the storage
     * specified in backup policy. One can also override the same by specifying the backup storage details as part of
     * the restore partition description in body. Once the restore is initiated, its progress can be tracked using the
     * GetRestoreProgress operation. In case, the operation times out, specify a greater restore timeout value in the
     * query parameter.
     *
     * @param partitionId The identity of the partition.
     * @param restorePartitionDescription Describes the parameters to restore the partition.
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to
     *     complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could
     *     be that the restore operation goes through even though it completes with timeout. In case of timeout error,
     *     its recommended to invoke this operation again with a greater timeout value. the default value for the same
     *     is 10 minutes.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restorePartitionAsync(
            UUID partitionId,
            RestorePartitionDescription restorePartitionDescription,
            Integer restoreTimeout,
            Long timeout) {
        return restorePartitionWithResponseAsync(partitionId, restorePartitionDescription, restoreTimeout, timeout)
                .flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns information about the state of the latest restore operation along with details or failure reason in case
     * of completion.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the progress of a restore operation on a partition along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RestoreProgressInfo>> getPartitionRestoreProgressWithResponseAsync(
            UUID partitionId, Long timeout) {
        final String accept = "application/json";
        return service.getPartitionRestoreProgress(this.getHost(), partitionId, this.getApiVersion(), timeout, accept);
    }

    /**
     * Returns information about the state of the latest restore operation along with details or failure reason in case
     * of completion.
     *
     * @param partitionId The identity of the partition.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the progress of a restore operation on a partition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RestoreProgressInfo> getPartitionRestoreProgressAsync(UUID partitionId, Long timeout) {
        return getPartitionRestoreProgressWithResponseAsync(partitionId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
     * specified backup location (FileShare or Azure Blob Storage).
     *
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for
     *     enumerating backups.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups available for the specified backed up entity (Application, Service or Partition) at
     *     the specified backup location (FileShare or Azure Blob Storage) along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedBackupInfoList>> getBackupsFromBackupLocationWithResponseAsync(
            GetBackupByStorageQueryDescription getBackupByStorageQueryDescription,
            Long timeout,
            String continuationToken,
            Long maxResults) {
        final String accept = "application/json";
        return service.getBackupsFromBackupLocation(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                continuationToken,
                maxResults,
                getBackupByStorageQueryDescription,
                accept);
    }

    /**
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the
     * specified backup location (FileShare or Azure Blob Storage).
     *
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for
     *     enumerating backups.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter
     *     defines the upper bound on the number of results returned. The results returned can be less than the
     *     specified maximum results if they do not fit in the message as per the max message size restrictions defined
     *     in the configuration. If this parameter is zero or not specified, the paged query includes as many results as
     *     possible that fit in the return message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of backups available for the specified backed up entity (Application, Service or Partition) at
     *     the specified backup location (FileShare or Azure Blob Storage) on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedBackupInfoList> getBackupsFromBackupLocationAsync(
            GetBackupByStorageQueryDescription getBackupByStorageQueryDescription,
            Long timeout,
            String continuationToken,
            Long maxResults) {
        return getBackupsFromBackupLocationWithResponseAsync(
                        getBackupByStorageQueryDescription, timeout, continuationToken, maxResults)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates the specified Service Fabric name.
     *
     * @param nameDescription Describes the Service Fabric name to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createNameWithResponseAsync(NameDescription nameDescription, Long timeout) {
        final String accept = "application/json";
        return service.createName(this.getHost(), this.getApiVersion(), timeout, nameDescription, accept);
    }

    /**
     * Creates the specified Service Fabric name.
     *
     * @param nameDescription Describes the Service Fabric name to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createNameAsync(NameDescription nameDescription, Long timeout) {
        return createNameWithResponseAsync(nameDescription, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Returns whether the specified Service Fabric name exists.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getNameExistsInfoWithResponseAsync(String nameId, Long timeout) {
        final String accept = "application/json";
        return service.getNameExistsInfo(this.getHost(), this.getApiVersion(), nameId, timeout, accept);
    }

    /**
     * Returns whether the specified Service Fabric name exists.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getNameExistsInfoAsync(String nameId, Long timeout) {
        return getNameExistsInfoWithResponseAsync(nameId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
     * child properties will fail.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteNameWithResponseAsync(String nameId, Long timeout) {
        final String accept = "application/json";
        return service.deleteName(this.getHost(), this.getApiVersion(), nameId, timeout, accept);
    }

    /**
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with
     * child properties will fail.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteNameAsync(String nameId, Long timeout) {
        return deleteNameWithResponseAsync(nameId, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
     * results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
     * doesn't exist will fail.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param recursive Allows specifying that the search performed should be recursive.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of Service Fabric names along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedSubNameInfoList>> getSubNameInfoListWithResponseAsync(
            String nameId, Boolean recursive, String continuationToken, Long timeout) {
        final String accept = "application/json";
        return service.getSubNameInfoList(
                this.getHost(), this.getApiVersion(), nameId, recursive, continuationToken, timeout, accept);
    }

    /**
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of
     * results is returned as well as a continuation token, which can be used to get the next page. Querying a name that
     * doesn't exist will fail.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param recursive Allows specifying that the search performed should be recursive.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of Service Fabric names on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedSubNameInfoList> getSubNameInfoListAsync(
            String nameId, Boolean recursive, String continuationToken, Long timeout) {
        return getSubNameInfoListWithResponseAsync(nameId, recursive, continuationToken, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets
     * the information about these properties in a paged list. The information includes name, value, and metadata about
     * each of the properties.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param includeValues Allows specifying whether to include the values of the properties returned. True if values
     *     should be returned with the metadata; False to return only property metadata.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paged list of Service Fabric properties under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PagedPropertyInfoList>> getPropertyInfoListWithResponseAsync(
            String nameId, Boolean includeValues, String continuationToken, Long timeout) {
        final String accept = "application/json";
        return service.getPropertyInfoList(
                this.getHost(), this.getApiVersion(), nameId, includeValues, continuationToken, timeout, accept);
    }

    /**
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets
     * the information about these properties in a paged list. The information includes name, value, and metadata about
     * each of the properties.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param includeValues Allows specifying whether to include the values of the properties returned. True if values
     *     should be returned with the metadata; False to return only property metadata.
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation
     *     token with a non-empty value is included in the response of the API when the results from the system do not
     *     fit in a single response. When this value is passed to the next API call, the API returns next set of
     *     results. If there are no further results, then the continuation token does not contain a value. The value of
     *     this parameter should not be URL encoded.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paged list of Service Fabric properties under a given name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedPropertyInfoList> getPropertyInfoListAsync(
            String nameId, Boolean includeValues, String continuationToken, Long timeout) {
        return getPropertyInfoListWithResponseAsync(nameId, includeValues, continuationToken, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyDescription Describes the Service Fabric property to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putPropertyWithResponseAsync(
            String nameId, PropertyDescription propertyDescription, Long timeout) {
        final String accept = "application/json";
        return service.putProperty(this.getHost(), this.getApiVersion(), nameId, timeout, propertyDescription, accept);
    }

    /**
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyDescription Describes the Service Fabric property to be created.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putPropertyAsync(String nameId, PropertyDescription propertyDescription, Long timeout) {
        return putPropertyWithResponseAsync(nameId, propertyDescription, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyName Specifies the name of the property to get.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Service Fabric property under a given name along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PropertyInfo>> getPropertyInfoWithResponseAsync(
            String nameId, String propertyName, Long timeout) {
        final String accept = "application/json";
        return service.getPropertyInfo(this.getHost(), this.getApiVersion(), nameId, propertyName, timeout, accept);
    }

    /**
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyName Specifies the name of the property to get.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Service Fabric property under a given name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PropertyInfo> getPropertyInfoAsync(String nameId, String propertyName, Long timeout) {
        return getPropertyInfoWithResponseAsync(nameId, propertyName, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be
     * deleted.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyName Specifies the name of the property to get.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePropertyWithResponseAsync(String nameId, String propertyName, Long timeout) {
        final String accept = "application/json";
        return service.deleteProperty(this.getHost(), this.getApiVersion(), nameId, propertyName, timeout, accept);
    }

    /**
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be
     * deleted.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyName Specifies the name of the property to get.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePropertyAsync(String nameId, String propertyName, Long timeout) {
        return deletePropertyWithResponseAsync(nameId, propertyName, timeout).flatMap(ignored -> Mono.empty());
    }

    /**
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return derived from PropertyBatchInfo along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PropertyBatchInfo>> submitPropertyBatchWithResponseAsync(
            String nameId, PropertyBatchDescriptionList propertyBatchDescriptionList, Long timeout) {
        final String accept = "application/json";
        return service.submitPropertyBatch(
                this.getHost(), this.getApiVersion(), nameId, timeout, propertyBatchDescriptionList, accept);
    }

    /**
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return derived from PropertyBatchInfo on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PropertyBatchInfo> submitPropertyBatchAsync(
            String nameId, PropertyBatchDescriptionList propertyBatchDescriptionList, Long timeout) {
        return submitPropertyBatchWithResponseAsync(nameId, propertyBatchDescriptionList, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ClusterEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ClusterEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ClusterEvent>>> getClusterEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getClusterEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ClusterEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ClusterEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ClusterEvent>> getClusterEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getClusterEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ContainerInstanceEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ContainerInstanceEvent objects along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ContainerInstanceEvent>>> getContainersEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getContainersEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ContainerInstanceEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ContainerInstanceEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ContainerInstanceEvent>> getContainersEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getContainersEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * @param nodeName The name of the node.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<NodeEvent>>> getNodeEventListWithResponseAsync(
            String nodeName,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getNodeEventList(
                this.getHost(),
                this.getApiVersion(),
                nodeName,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * @param nodeName The name of the node.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of NodeEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NodeEvent>> getNodeEventListAsync(
            String nodeName,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getNodeEventListWithResponseAsync(
                        nodeName,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of NodeEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<NodeEvent>>> getNodesEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getNodesEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of NodeEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of NodeEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NodeEvent>> getNodesEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getNodesEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ApplicationEvent>>> getApplicationEventListWithResponseAsync(
            String applicationId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getApplicationEventList(
                this.getHost(),
                this.getApiVersion(),
                applicationId,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * @param applicationId The identity of the application. This is typically the full name of the application without
     *     the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character.
     *     For example, if the application name is "fabric:/myapp/app1", the application identity would be "myapp~app1"
     *     in 6.0+ and "myapp/app1" in previous versions.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ApplicationEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ApplicationEvent>> getApplicationEventListAsync(
            String applicationId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getApplicationEventListWithResponseAsync(
                        applicationId,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ApplicationEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ApplicationEvent>>> getApplicationsEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getApplicationsEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ApplicationEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ApplicationEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ApplicationEvent>> getApplicationsEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getApplicationsEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ServiceEvent>>> getServiceEventListWithResponseAsync(
            String serviceId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getServiceEventList(
                this.getHost(),
                this.getApiVersion(),
                serviceId,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the
     *     'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the "~" character. For
     *     example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be "myapp~app1~svc1" in
     *     6.0+ and "myapp/app1/svc1" in previous versions.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ServiceEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ServiceEvent>> getServiceEventListAsync(
            String serviceId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getServiceEventListWithResponseAsync(
                        serviceId,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ServiceEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ServiceEvent>>> getServicesEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getServicesEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ServiceEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ServiceEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ServiceEvent>> getServicesEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getServicesEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<PartitionEvent>>> getPartitionEventListWithResponseAsync(
            UUID partitionId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getPartitionEventList(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of PartitionEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PartitionEvent>> getPartitionEventListAsync(
            UUID partitionId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getPartitionEventListWithResponseAsync(
                        partitionId,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of PartitionEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<PartitionEvent>>> getPartitionsEventListWithResponseAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getPartitionsEventList(
                this.getHost(),
                this.getApiVersion(),
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of PartitionEvent objects.
     *
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of PartitionEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PartitionEvent>> getPartitionsEventListAsync(
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getPartitionsEventListWithResponseAsync(
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ReplicaEvent>>> getPartitionReplicaEventListWithResponseAsync(
            UUID partitionId,
            String replicaId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getPartitionReplicaEventList(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                replicaId,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param replicaId The identifier of the replica.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ReplicaEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ReplicaEvent>> getPartitionReplicaEventListAsync(
            UUID partitionId,
            String replicaId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getPartitionReplicaEventListWithResponseAsync(
                        partitionId,
                        replicaId,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ReplicaEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ReplicaEvent>>> getPartitionReplicasEventListWithResponseAsync(
            UUID partitionId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        final String accept = "application/json";
        return service.getPartitionReplicasEventList(
                this.getHost(),
                this.getApiVersion(),
                partitionId,
                timeout,
                startTimeUtc,
                endTimeUtc,
                eventsTypesFilter,
                excludeAnalysisEvents,
                skipCorrelationLookup,
                accept);
    }

    /**
     * The response is list of ReplicaEvent objects.
     *
     * @param partitionId The identity of the partition.
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only
     *     be included in the response.
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed.
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed.
     *     otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets
     *     populated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of ReplicaEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ReplicaEvent>> getPartitionReplicasEventListAsync(
            UUID partitionId,
            String startTimeUtc,
            String endTimeUtc,
            Long timeout,
            String eventsTypesFilter,
            Boolean excludeAnalysisEvents,
            Boolean skipCorrelationLookup) {
        return getPartitionReplicasEventListWithResponseAsync(
                        partitionId,
                        startTimeUtc,
                        endTimeUtc,
                        timeout,
                        eventsTypesFilter,
                        excludeAnalysisEvents,
                        skipCorrelationLookup)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The response is list of FabricEvents.
     *
     * @param eventInstanceId The EventInstanceId.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of FabricEvent objects along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<FabricEvent>>> getCorrelatedEventListWithResponseAsync(
            String eventInstanceId, Long timeout) {
        final String accept = "application/json";
        return service.getCorrelatedEventList(this.getHost(), this.getApiVersion(), eventInstanceId, timeout, accept);
    }

    /**
     * The response is list of FabricEvents.
     *
     * @param eventInstanceId The EventInstanceId.
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time
     *     duration that the client is willing to wait for the requested operation to complete. The default value for
     *     this parameter is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws FabricErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of FabricEvent objects on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FabricEvent>> getCorrelatedEventListAsync(String eventInstanceId, Long timeout) {
        return getCorrelatedEventListWithResponseAsync(eventInstanceId, timeout)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }
}
